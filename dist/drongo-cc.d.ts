// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../libs/cc.d.ts

declare module 'drongo-cc' {
    export { GGroup } from "drongo-cc/fairygui/GGroup";
    export { GObject } from "drongo-cc/fairygui/GObject";
    export { GGraph } from "drongo-cc/fairygui/GGraph";
    export { GImage } from "drongo-cc/fairygui/GImage";
    export { GMovieClip } from "drongo-cc/fairygui/GMovieClip";
    export { GRoot } from "drongo-cc/fairygui/GRoot";
    export { GTextField } from "drongo-cc/fairygui/GTextField";
    export { GRichTextField } from "drongo-cc/fairygui/GRichTextField";
    export { GTextInput } from "drongo-cc/fairygui/GTextInput";
    export { GLoader } from "drongo-cc/fairygui/GLoader";
    export { GLoader3D } from "drongo-cc/fairygui/GLoader3D";
    export { GComponent } from "drongo-cc/fairygui/GComponent";
    export { GLabel } from "drongo-cc/fairygui/GLabel";
    export { GButton } from "drongo-cc/fairygui/GButton";
    export { GComboBox } from "drongo-cc/fairygui/GComboBox";
    export { GSlider } from "drongo-cc/fairygui/GSlider";
    export { GProgressBar } from "drongo-cc/fairygui/GProgressBar";
    export { GScrollBar } from "drongo-cc/fairygui/GScrollBar";
    export { GList, ListItemRenderer } from "drongo-cc/fairygui/GList";
    export { GTree } from "drongo-cc/fairygui/GTree";
    export { GTreeNode } from "drongo-cc/fairygui/GTreeNode";
    export { Window } from "drongo-cc/fairygui/Window";
    export { PopupMenu } from "drongo-cc/fairygui/PopupMenu";
    export { Controller } from "drongo-cc/fairygui/Controller";
    export { Transition } from "drongo-cc/fairygui/Transition";
    export { ScrollPane } from "drongo-cc/fairygui/ScrollPane";
    export { RelationType } from "drongo-cc/fairygui/FieldTypes";
    export { UIPackage } from "drongo-cc/fairygui/UIPackage";
    export { PackageItem } from "drongo-cc/fairygui/PackageItem";
    export { GObjectPool } from "drongo-cc/fairygui/GObjectPool";
    export { UIObjectFactory } from "drongo-cc/fairygui/UIObjectFactory";
    export { UIConfig, registerFont } from "drongo-cc/fairygui/UIConfig";
    export { DragDropManager } from "drongo-cc/fairygui/DragDropManager";
    export { AsyncOperation } from "drongo-cc/fairygui/AsyncOperation";
    export { TranslationHelper } from "drongo-cc/fairygui/TranslationHelper";
    export { GearAnimation } from "drongo-cc/fairygui/gears/GearAnimation";
    export { GearBase } from "drongo-cc/fairygui/gears/GearBase";
    export { GearColor } from "drongo-cc/fairygui/gears/GearColor";
    export { GearDisplay } from "drongo-cc/fairygui/gears/GearDisplay";
    export { GearDisplay2 } from "drongo-cc/fairygui/gears/GearDisplay2";
    export { GearFontSize } from "drongo-cc/fairygui/gears/GearFontSize";
    export { GearIcon } from "drongo-cc/fairygui/gears/GearIcon";
    export { GearLook } from "drongo-cc/fairygui/gears/GearLook";
    export { GearSize } from "drongo-cc/fairygui/gears/GearSize";
    export { GearText } from "drongo-cc/fairygui/gears/GearText";
    export { GearXY } from "drongo-cc/fairygui/gears/GearXY";
    export { BlendMode } from "drongo-cc/fairygui/display/BlendMode";
    export { Image } from "drongo-cc/fairygui/display/Image";
    export { MovieClip, Frame } from "drongo-cc/fairygui/display/MovieClip";
    export { FGUIEvent } from "drongo-cc/fairygui/event/FGUIEvent";
    export { GTween } from "drongo-cc/fairygui/tween/GTween";
    export { GTweener } from "drongo-cc/fairygui/tween/GTweener";
    export { EaseType } from "drongo-cc/fairygui/tween/EaseType";
    export { UBBParser } from "drongo-cc/fairygui/utils/UBBParser";
    export { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export { AudioManager } from "drongo-cc/drongo/audios/AudioManager";
    export { IAudioChannel } from "drongo-cc/drongo/audios/IAudioChannel";
    export { IAudioGroup } from "drongo-cc/drongo/audios/IAudioGroup";
    export { IAudioManager } from "drongo-cc/drongo/audios/IAudioManager";
    export { AudioChannelImpl } from "drongo-cc/drongo/audios/AudioChannelImpl";
    export { AudioManagerImpl } from "drongo-cc/drongo/audios/AudioManagerImpl";
    export { BinderUtils } from "drongo-cc/drongo/bindings/BinderUtils";
    export { BindingUtils } from "drongo-cc/drongo/bindings/BindingUtils";
    export { FunctionHook } from "drongo-cc/drongo/bindings/FunctionHook";
    export { PropertyBinder } from "drongo-cc/drongo/bindings/PropertyBinder";
    export { BaseConfigAccessor } from "drongo-cc/drongo/configs/BaseConfigAccessor";
    export { ConfigManager } from "drongo-cc/drongo/configs/ConfigManager";
    export { IConfigAccessor } from "drongo-cc/drongo/configs/core/IConfigAccessor";
    export { IConfigManager } from "drongo-cc/drongo/configs/core/IConfigManager";
    export { Dictionary } from "drongo-cc/drongo/containers/Dictionary";
    export { List } from "drongo-cc/drongo/containers/List";
    export { Debuger } from "drongo-cc/drongo/debugers/Debuger";
    export { DebugerImpl } from "drongo-cc/drongo/debugers/DebugerImpl";
    export { IDebuger } from "drongo-cc/drongo/debugers/IDebuger";
    export { Event } from "drongo-cc/drongo/events/Event";
    export { EventDispatcher } from "drongo-cc/drongo/events/EventDispatcher";
    export { IEventDispatcher } from "drongo-cc/drongo/events/IEventDispatcher";
    export { GetClassName } from "drongo-cc/drongo/exports/GetClassName";
    export { FSM } from "drongo-cc/drongo/fsm/FSM";
    export { IState } from "drongo-cc/drongo/fsm/IState";
    export { GUIManager } from "drongo-cc/drongo/gui/GUIManager";
    export { ILayer } from "drongo-cc/drongo/gui/core/layer/ILayer";
    export { ILayerManager } from "drongo-cc/drongo/gui/core/layer/ILayerManager";
    export { LayerManager } from "drongo-cc/drongo/gui/core/layer/LayerManager";
    export { ILoadingView } from "drongo-cc/drongo/gui/core/loadingView/ILoadingView";
    export { LoadingView } from "drongo-cc/drongo/gui/core/loadingView/LoadingView";
    export { IRelationInfo } from "drongo-cc/drongo/gui/core/relations/IRelationInfo";
    export { IRelationList } from "drongo-cc/drongo/gui/core/relations/IRelationList";
    export { RelationManager } from "drongo-cc/drongo/gui/core/relations/RelationManager";
    export { GUIState } from "drongo-cc/drongo/gui/core/GUIState";
    export { IGUIManager } from "drongo-cc/drongo/gui/core/IGUIManager";
    export { IGUIMediator } from "drongo-cc/drongo/gui/core/IGUIMediator";
    export { IViewComponent } from "drongo-cc/drongo/gui/core/IViewComponent";
    export { IViewCreator } from "drongo-cc/drongo/gui/core/IViewCreator";
    export { BaseMediator } from "drongo-cc/drongo/gui/gui/BaseMediator";
    export { GUIManagerImpl } from "drongo-cc/drongo/gui/gui/GUIManagerImpl";
    export { GUIMediator } from "drongo-cc/drongo/gui/gui/GUIMediator";
    export { GUIProxy } from "drongo-cc/drongo/gui/gui/GUIProxy";
    export { IGUIInfo } from "drongo-cc/drongo/gui/gui/IGUIInfo";
    export { SubGUIMediator } from "drongo-cc/drongo/gui/gui/SubGUIMediator";
    export { Layer } from "drongo-cc/drongo/gui/layer/Layer";
    export { LayerManagerImpl } from "drongo-cc/drongo/gui/layer/LayerManagerImpl";
    export { FindPosition } from "drongo-cc/drongo/maxRects/FindPosition";
    export { MaxRectBinPack } from "drongo-cc/drongo/maxRects/MaxRectsBinPack";
    export { Rect } from "drongo-cc/drongo/maxRects/Rect";
    export { IRecyclable } from "drongo-cc/drongo/pools/IRecyclable";
    export { Pool } from "drongo-cc/drongo/pools/Pool";
    export { Res } from "drongo-cc/drongo/res/Res";
    export { ILoader } from "drongo-cc/drongo/res/core/ILoader";
    export { IRes } from "drongo-cc/drongo/res/core/IRes";
    export { IResManager } from "drongo-cc/drongo/res/core/IResManager";
    export { IResource } from "drongo-cc/drongo/res/core/IResource";
    export { ResRef } from "drongo-cc/drongo/res/core/ResRef";
    export { FullURL, Key2URL, ResURL, URL2Key } from "drongo-cc/drongo/res/core/ResURL";
    export { CCLoaderImpl } from "drongo-cc/drongo/res/loaders/CCLoaderImpl";
    export { FGUILoader } from "drongo-cc/drongo/res/loaders/FGUILoader";
    export { Loader } from "drongo-cc/drongo/res/loaders/Loader";
    export { LoaderQueue } from "drongo-cc/drongo/res/loaders/LoaderQueue";
    export { ResRequest } from "drongo-cc/drongo/res/loaders/ResRequest";
    export { FGUIResource } from "drongo-cc/drongo/res/res/FGUIResource";
    export { ResImpl } from "drongo-cc/drongo/res/res/ResImpl";
    export { ResManager } from "drongo-cc/drongo/res/res/ResManager";
    export { ResManagerImpl } from "drongo-cc/drongo/res/res/ResManagerImpl";
    export { ResourceImpl } from "drongo-cc/drongo/res/res/ResourceImpl";
    export { BaseService } from "drongo-cc/drongo/services/BaseService";
    export { IService } from "drongo-cc/drongo/services/IService";
    export { ServiceManager } from "drongo-cc/drongo/services/ServiceManager";
    export { ILocalStorage } from "drongo-cc/drongo/storages/ILocalStorage";
    export { LocalStorage } from "drongo-cc/drongo/storages/LocalStorage";
    export { LocalStorageImpl } from "drongo-cc/drongo/storages/LocalStorageImpl";
    export { ITask } from "drongo-cc/drongo/tasks/ITask";
    export { TaskQueue } from "drongo-cc/drongo/tasks/TaskQueue";
    export { TaskSequence } from "drongo-cc/drongo/tasks/TaskSequence";
    export { ITicker } from "drongo-cc/drongo/ticker/ITicker";
    export { ITickerManager } from "drongo-cc/drongo/ticker/ITickerManager";
    export { TickerManager } from "drongo-cc/drongo/ticker/TickerManager";
    export { TickerManagerImpl } from "drongo-cc/drongo/ticker/TickerManagerImpl";
    export { ITimer } from "drongo-cc/drongo/timer/ITimer";
    export { Timer } from "drongo-cc/drongo/timer/Timer";
    export { TimerImpl } from "drongo-cc/drongo/timer/TimerImpl";
    export { BitFlag } from "drongo-cc/drongo/utils/BitFlag";
    export { ByteArray } from "drongo-cc/drongo/utils/ByteArray";
    export { Handler } from "drongo-cc/drongo/utils/Handler";
    export { Injector } from "drongo-cc/drongo/utils/Injector";
    export { StringUtils } from "drongo-cc/drongo/utils/StringUtils";
    export { Drongo } from "drongo-cc/drongo";
}

declare module 'drongo-cc/fairygui/GGroup' {
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class GGroup extends GObject {
        _updating: number;
        constructor();
        dispose(): void;
        get layout(): number;
        set layout(value: number);
        get lineGap(): number;
        set lineGap(value: number);
        get columnGap(): number;
        set columnGap(value: number);
        get excludeInvisibles(): boolean;
        set excludeInvisibles(value: boolean);
        get autoSizeDisabled(): boolean;
        set autoSizeDisabled(value: boolean);
        get mainGridMinSize(): number;
        set mainGridMinSize(value: number);
        get mainGridIndex(): number;
        set mainGridIndex(value: number);
        setBoundsChangedFlag(positionChangedOnly?: boolean): void;
        ensureSizeCorrect(): void;
        ensureBoundsCorrect(): void;
        moveChildren(dx: number, dy: number): void;
        resizeChildren(dw: number, dh: number): void;
        handleAlphaChanged(): void;
        handleVisibleChanged(): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'drongo-cc/fairygui/GObject' {
    import { Vec2, Rect, Component, Node, UITransform, UIOpacity } from "cc";
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    import { Controller } from "drongo-cc/fairygui/Controller";
    import { BlendMode } from "drongo-cc/fairygui/display/BlendMode";
    import { GComponent } from "drongo-cc/fairygui/GComponent";
    import { GearBase } from "drongo-cc/fairygui/gears/GearBase";
    import { GearLook } from "drongo-cc/fairygui/gears/GearLook";
    import { GearSize } from "drongo-cc/fairygui/gears/GearSize";
    import { GearXY } from "drongo-cc/fairygui/gears/GearXY";
    import { GGroup } from "drongo-cc/fairygui/GGroup";
    import { GTreeNode } from "drongo-cc/fairygui/GTreeNode";
    import { PackageItem } from "drongo-cc/fairygui/PackageItem";
    import { Relations } from "drongo-cc/fairygui/Relations";
    import { TooltipsData } from "drongo-cc/fairygui/tooltips/TooltipsData";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class GObject {
        data?: any;
        packageItem?: PackageItem;
        static draggingObject: GObject | null;
        protected _x: number;
        protected _y: number;
        protected _alpha: number;
        protected _visible: boolean;
        protected _touchable: boolean;
        protected _grayed?: boolean;
        protected _draggable?: boolean;
        protected _skewX: number;
        protected _skewY: number;
        protected _pivotAsAnchor?: boolean;
        protected _sortingOrder: number;
        protected _internalVisible: boolean;
        protected _handlingController?: boolean;
        protected _tooltips?: TooltipsData;
        protected _blendMode: BlendMode;
        protected _pixelSnapping?: boolean;
        protected _dragTesting?: boolean;
        protected _dragStartPos?: Vec2;
        protected _relations: Relations;
        protected _group: GGroup | null;
        protected _gears: GearBase[];
        protected _node: Node;
        protected _dragBounds?: Rect;
        sourceWidth: number;
        sourceHeight: number;
        initWidth: number;
        initHeight: number;
        minWidth: number;
        minHeight: number;
        maxWidth: number;
        maxHeight: number;
        _parent: GComponent | null;
        _width: number;
        _height: number;
        _rawWidth: number;
        _rawHeight: number;
        _id: string;
        _name: string;
        _underConstruct: boolean;
        _gearLocked?: boolean;
        _sizePercentInGroup: number;
        _touchDisabled?: boolean;
        _partner: GObjectPartner;
        _treeNode?: GTreeNode;
        _uiTrans: UITransform;
        _uiOpacity: UIOpacity;
        constructor();
        get id(): string;
        get name(): string;
        set name(value: string);
        get x(): number;
        set x(value: number);
        get y(): number;
        set y(value: number);
        setPosition(xv: number, yv: number): void;
        get xMin(): number;
        set xMin(value: number);
        get yMin(): number;
        set yMin(value: number);
        get pixelSnapping(): boolean;
        set pixelSnapping(value: boolean);
        center(restraint?: boolean): void;
        get width(): number;
        set width(value: number);
        get height(): number;
        set height(value: number);
        setSize(wv: number, hv: number, ignorePivot?: boolean): void;
        makeFullScreen(): void;
        ensureSizeCorrect(): void;
        get actualWidth(): number;
        get actualHeight(): number;
        get scaleX(): number;
        set scaleX(value: number);
        get scaleY(): number;
        set scaleY(value: number);
        setScale(sx: number, sy: number): void;
        get skewX(): number;
        get pivotX(): number;
        set pivotX(value: number);
        get pivotY(): number;
        set pivotY(value: number);
        setPivot(xv: number, yv: number, asAnchor?: boolean): void;
        get pivotAsAnchor(): boolean;
        get touchable(): boolean;
        set touchable(value: boolean);
        get grayed(): boolean;
        set grayed(value: boolean);
        get enabled(): boolean;
        set enabled(value: boolean);
        get rotation(): number;
        set rotation(value: number);
        get alpha(): number;
        set alpha(value: number);
        get visible(): boolean;
        set visible(value: boolean);
        get _finalVisible(): boolean;
        get internalVisible3(): boolean;
        get sortingOrder(): number;
        set sortingOrder(value: number);
        requestFocus(): void;
        get tooltips(): TooltipsData | null;
        set tooltips(value: TooltipsData | null);
        get blendMode(): BlendMode;
        set blendMode(value: BlendMode);
        get onStage(): boolean;
        get resourceURL(): string | null;
        set group(value: GGroup);
        get group(): GGroup;
        getGear(index: number): GearBase;
        protected updateGear(index: number): void;
        checkGearController(index: number, c: Controller): boolean;
        updateGearFromRelations(index: number, dx: number, dy: number): void;
        addDisplayLock(): number;
        releaseDisplayLock(token: number): void;
        get gearXY(): GearXY;
        get gearSize(): GearSize;
        get gearLook(): GearLook;
        get relations(): Relations;
        addRelation(target: GObject, relationType: number, usePercent?: boolean): void;
        removeRelation(target: GObject, relationType: number): void;
        get node(): Node;
        get parent(): GComponent;
        removeFromParent(): void;
        findParent(): GObject;
        get asCom(): GComponent;
        static cast(obj: Node): GObject;
        get text(): string | null;
        set text(value: string | null);
        get icon(): ResURL | null;
        set icon(value: ResURL | null);
        get treeNode(): GTreeNode;
        get isDisposed(): boolean;
        dispose(): void;
        protected onEnable(): void;
        protected onDisable(): void;
        protected onUpdate(): void;
        protected onDestroy(): void;
        onClick(listener: Function, target?: any): void;
        onceClick(listener: Function, target?: any): void;
        offClick(listener: Function, target?: any): void;
        clearClick(): void;
        hasClickListener(): boolean;
        on(type: string, listener: Function, target?: any): void;
        once(type: string, listener: Function, target?: any): void;
        off(type: string, listener?: Function, target?: any): void;
        get draggable(): boolean;
        set draggable(value: boolean);
        get dragBounds(): Rect;
        set dragBounds(value: Rect);
        startDrag(touchId?: number): void;
        stopDrag(): void;
        get dragging(): boolean;
        localToGlobal(ax?: number, ay?: number, result?: Vec2): Vec2;
        globalToLocal(ax?: number, ay?: number, result?: Vec2): Vec2;
        localToGlobalRect(ax?: number, ay?: number, aw?: number, ah?: number, result?: Rect): Rect;
        globalToLocalRect(ax?: number, ay?: number, aw?: number, ah?: number, result?: Rect): Rect;
        handleControllerChanged(c: Controller): void;
        protected handleAnchorChanged(): void;
        handlePositionChanged(): void;
        protected handleSizeChanged(): void;
        protected handleGrayedChanged(): void;
        handleVisibleChanged(): void;
        hitTest(globalPt: Vec2, forTouch?: boolean): GObject;
        protected _hitTest(pt: Vec2, globalPt: Vec2): GObject;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        constructFromResource(): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
    export class GObjectPartner extends Component {
        _emitDisplayEvents?: boolean;
        callLater(callback: any, delay?: number): void;
        onClickLink(evt: Event, text: string): void;
        protected onEnable(): void;
        protected onDisable(): void;
        protected update(dt: number): void;
        protected onDestroy(): void;
    }
    export interface IGRoot {
        inst: any;
    }
    export var Decls: {
        GRoot?: IGRoot;
    };
    export var constructingDepth: {
        n: number;
    };
}

declare module 'drongo-cc/fairygui/GGraph' {
    import { Color, Graphics, Vec2 } from "cc";
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class GGraph extends GObject {
        _content: Graphics;
        constructor();
        drawRect(lineSize: number, lineColor: Color, fillColor: Color, corner?: Array<number>): void;
        drawEllipse(lineSize: number, lineColor: Color, fillColor: Color): void;
        drawRegularPolygon(lineSize: number, lineColor: Color, fillColor: Color, sides: number, startAngle?: number, distances?: number[]): void;
        drawPolygon(lineSize: number, lineColor: Color, fillColor: Color, points: Array<number>): void;
        get distances(): number[];
        set distances(value: number[]);
        clearGraphics(): void;
        get type(): number;
        get color(): Color;
        set color(value: Color);
        protected handleSizeChanged(): void;
        protected handleAnchorChanged(): void;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        protected _hitTest(pt: Vec2): GObject;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'drongo-cc/fairygui/GImage' {
    import { Color } from "cc";
    import { Image } from "drongo-cc/fairygui/display/Image";
    import { FlipType, FillMethod, FillOrigin } from "drongo-cc/fairygui/FieldTypes";
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class GImage extends GObject {
        _content: Image;
        constructor();
        get color(): Color;
        set color(value: Color);
        get flip(): FlipType;
        set flip(value: FlipType);
        get fillMethod(): FillMethod;
        set fillMethod(value: FillMethod);
        get fillOrigin(): FillOrigin;
        set fillOrigin(value: FillOrigin);
        get fillClockwise(): boolean;
        set fillClockwise(value: boolean);
        get fillAmount(): number;
        set fillAmount(value: number);
        constructFromResource(): void;
        protected handleGrayedChanged(): void;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'drongo-cc/fairygui/GMovieClip' {
    import { Color } from "cc";
    import { MovieClip } from "drongo-cc/fairygui/display/MovieClip";
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class GMovieClip extends GObject {
        _content: MovieClip;
        constructor();
        get color(): Color;
        set color(value: Color);
        get playing(): boolean;
        set playing(value: boolean);
        get frame(): number;
        set frame(value: number);
        get timeScale(): number;
        set timeScale(value: number);
        rewind(): void;
        syncStatus(anotherMc: GMovieClip): void;
        advance(timeInSeconds: number): void;
        setPlaySettings(start?: number, end?: number, times?: number, endAt?: number, endCallback?: (() => void) | null): void;
        protected handleGrayedChanged(): void;
        protected handleSizeChanged(): void;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        constructFromResource(): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'drongo-cc/fairygui/GRoot' {
    import { Vec2, AudioClip, Node } from "cc";
    import { InputProcessor } from "drongo-cc/fairygui/event/InputProcessor";
    import { PopupDirection } from "drongo-cc/fairygui/FieldTypes";
    import { GComponent } from "drongo-cc/fairygui/GComponent";
    import { GGraph } from "drongo-cc/fairygui/GGraph";
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { Window } from "drongo-cc/fairygui/Window";
    export class GRoot extends GComponent {
        static get inst(): GRoot;
        static create(root?: Node): GRoot;
        constructor();
        protected onDestroy(): void;
        getTouchPosition(touchId?: number): Vec2;
        get touchTarget(): GObject;
        get inputProcessor(): InputProcessor;
        showWindow(win: Window): void;
        hideWindow(win: Window): void;
        hideWindowImmediately(win: Window): void;
        bringToFront(win: Window): void;
        showModalWait(msg?: string): void;
        closeModalWait(): void;
        closeAllExceptModals(): void;
        closeAllWindows(): void;
        getTopWindow(): Window;
        get modalLayer(): GGraph;
        get hasModalWindow(): boolean;
        get modalWaiting(): boolean;
        getPopupPosition(popup: GObject, target?: GObject, dir?: PopupDirection | boolean, result?: Vec2): Vec2;
        showPopup(popup: GObject, target?: GObject | null, dir?: PopupDirection | boolean): void;
        togglePopup(popup: GObject, target?: GObject, dir?: PopupDirection | boolean): void;
        hidePopup(popup?: GObject): void;
        get hasAnyPopup(): boolean;
        showTooltips(msg: string): void;
        showTooltipsWin(tooltipWin: GObject): void;
        hideTooltips(): void;
        get volumeScale(): number;
        set volumeScale(value: number);
        playOneShotSound(clip: AudioClip, volumeScale?: number): void;
        onWinResize(): void;
        handlePositionChanged(): void;
    }
}

declare module 'drongo-cc/fairygui/GTextField' {
    import { Color, Font, HorizontalTextAlignment, Label, LabelOutline, LabelShadow, Vec2, VerticalTextAlignment } from "cc";
    import { AutoSizeType } from "drongo-cc/fairygui/FieldTypes";
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class GTextField extends GObject {
        _label: Label;
        protected _font: string;
        protected _realFont: string | Font;
        protected _fontSize: number;
        protected _color: Color;
        protected _strokeColor?: Color;
        protected _shadowOffset?: Vec2;
        protected _shadowColor?: Color;
        protected _leading: number;
        protected _text: string;
        protected _ubbEnabled: boolean;
        protected _templateVars?: {
            [index: string]: string;
        };
        protected _autoSize: AutoSizeType;
        protected _updatingSize: boolean;
        protected _sizeDirty: boolean;
        protected _outline?: LabelOutline;
        protected _shadow?: LabelShadow;
        constructor();
        protected createRenderer(): void;
        set text(value: string | null);
        get text(): string | null;
        get font(): string | null;
        set font(value: string | null);
        get fontSize(): number;
        set fontSize(value: number);
        get color(): Color;
        set color(value: Color);
        get align(): HorizontalTextAlignment;
        set align(value: HorizontalTextAlignment);
        get verticalAlign(): VerticalTextAlignment;
        set verticalAlign(value: VerticalTextAlignment);
        get leading(): number;
        set leading(value: number);
        get letterSpacing(): number;
        set letterSpacing(value: number);
        get underline(): boolean;
        set underline(value: boolean);
        get bold(): boolean;
        set bold(value: boolean);
        get italic(): boolean;
        set italic(value: boolean);
        get singleLine(): boolean;
        set singleLine(value: boolean);
        get stroke(): number;
        set stroke(value: number);
        get strokeColor(): Color;
        set strokeColor(value: Color);
        get shadowOffset(): Vec2;
        set shadowOffset(value: Vec2);
        get shadowColor(): Color;
        set shadowColor(value: Color);
        set ubbEnabled(value: boolean);
        get ubbEnabled(): boolean;
        set autoSize(value: AutoSizeType);
        get autoSize(): AutoSizeType;
        protected parseTemplate(template: string): string;
        get templateVars(): {
            [index: string]: string;
        };
        set templateVars(value: {
            [index: string]: string;
        });
        setVar(name: string, value: string): GTextField;
        flushVars(): void;
        get textWidth(): number;
        ensureSizeCorrect(): void;
        protected updateText(): void;
        protected assignFont(label: any, value: string | Font): void;
        protected assignFontColor(label: any, value: Color): void;
        protected updateFont(): void;
        protected updateFontColor(): void;
        protected updateStrokeColor(): void;
        protected updateShadowColor(): void;
        protected updateFontSize(): void;
        protected updateOverflow(): void;
        protected markSizeChanged(): void;
        protected onLabelSizeChanged(): void;
        protected handleSizeChanged(): void;
        protected handleGrayedChanged(): void;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'drongo-cc/fairygui/GRichTextField' {
    import { HorizontalTextAlignment, RichText, SpriteAtlas, SpriteFrame } from "cc";
    import { GTextField } from "drongo-cc/fairygui/GTextField";
    export class RichTextImageAtlas extends SpriteAtlas {
        getSpriteFrame(key: string): SpriteFrame;
    }
    export class GRichTextField extends GTextField {
        _richText: RichText;
        linkUnderline: boolean;
        linkColor: string;
        constructor();
        protected createRenderer(): void;
        get align(): HorizontalTextAlignment;
        set align(value: HorizontalTextAlignment);
        get underline(): boolean;
        set underline(value: boolean);
        get bold(): boolean;
        set bold(value: boolean);
        get italic(): boolean;
        set italic(value: boolean);
        protected markSizeChanged(): void;
        protected updateText(): void;
        protected updateFont(): void;
        protected updateFontColor(): void;
        protected updateFontSize(): void;
        protected updateOverflow(): void;
        protected handleSizeChanged(): void;
    }
}

declare module 'drongo-cc/fairygui/GTextInput' {
    import { EditBox, HorizontalTextAlignment, VerticalTextAlignment } from "cc";
    import { GTextField } from "drongo-cc/fairygui/GTextField";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class GTextInput extends GTextField {
        _editBox: EditBox;
        constructor();
        protected createRenderer(): void;
        set editable(val: boolean);
        get editable(): boolean;
        set maxLength(val: number);
        get maxLength(): number;
        set promptText(val: string | null);
        get promptText(): string | null;
        set restrict(value: string | null);
        get restrict(): string | null;
        get password(): boolean;
        set password(val: boolean);
        get align(): HorizontalTextAlignment;
        set align(value: HorizontalTextAlignment);
        get verticalAlign(): VerticalTextAlignment;
        set verticalAlign(value: VerticalTextAlignment);
        get singleLine(): boolean;
        set singleLine(value: boolean);
        requestFocus(): void;
        protected markSizeChanged(): void;
        protected updateText(): void;
        protected updateFont(): void;
        protected updateFontColor(): void;
        protected updateFontSize(): void;
        protected updateOverflow(): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'drongo-cc/fairygui/GLoader' {
    import { Color, SpriteFrame, Vec2 } from "cc";
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    import { MovieClip } from "drongo-cc/fairygui/display/MovieClip";
    import { AlignType, VertAlignType, LoaderFillType, FillMethod, FillOrigin } from "drongo-cc/fairygui/FieldTypes";
    import { GComponent } from "drongo-cc/fairygui/GComponent";
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class GLoader extends GObject {
        _content: MovieClip;
        constructor();
        dispose(): void;
        get url(): ResURL | null;
        set url(value: ResURL | null);
        get icon(): ResURL | null;
        set icon(value: ResURL | null);
        get align(): AlignType;
        set align(value: AlignType);
        get verticalAlign(): VertAlignType;
        set verticalAlign(value: VertAlignType);
        get fill(): LoaderFillType;
        set fill(value: LoaderFillType);
        get shrinkOnly(): boolean;
        set shrinkOnly(value: boolean);
        get autoSize(): boolean;
        set autoSize(value: boolean);
        get playing(): boolean;
        set playing(value: boolean);
        get frame(): number;
        set frame(value: number);
        get color(): Color;
        set color(value: Color);
        get fillMethod(): FillMethod;
        set fillMethod(value: FillMethod);
        get fillOrigin(): FillOrigin;
        set fillOrigin(value: FillOrigin);
        get fillClockwise(): boolean;
        set fillClockwise(value: boolean);
        get fillAmount(): number;
        set fillAmount(value: number);
        get showErrorSign(): boolean;
        set showErrorSign(value: boolean);
        get component(): GComponent;
        get texture(): SpriteFrame;
        set texture(value: SpriteFrame);
        protected loadContent(): void;
        protected loadFromPackage(itemURL: string): void;
        protected loadExternal(): void;
        protected freeExternal(texture: SpriteFrame): void;
        protected onExternalLoadSuccess(texture: SpriteFrame): void;
        protected onExternalLoadFailed(): void;
        protected handleSizeChanged(): void;
        protected handleAnchorChanged(): void;
        protected handleGrayedChanged(): void;
        protected _hitTest(pt: Vec2, globalPt: Vec2): GObject;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'drongo-cc/fairygui/GLoader3D' {
    import { sp, dragonBones, Color, Vec2 } from "cc";
    import { AlignType, LoaderFillType, VertAlignType } from "drongo-cc/fairygui/FieldTypes";
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class GLoader3D extends GObject {
        constructor();
        dispose(): void;
        get url(): string | null;
        set url(value: string | null);
        get icon(): string | null;
        set icon(value: string | null);
        get align(): AlignType;
        set align(value: AlignType);
        get verticalAlign(): VertAlignType;
        set verticalAlign(value: VertAlignType);
        get fill(): LoaderFillType;
        set fill(value: LoaderFillType);
        get shrinkOnly(): boolean;
        set shrinkOnly(value: boolean);
        get autoSize(): boolean;
        set autoSize(value: boolean);
        get playing(): boolean;
        set playing(value: boolean);
        get frame(): number;
        set frame(value: number);
        get animationName(): string | null;
        set animationName(value: string | null);
        get skinName(): string | null;
        set skinName(value: string | null);
        get loop(): boolean;
        set loop(value: boolean);
        get color(): Color;
        set color(value: Color);
        get content(): sp.Skeleton | dragonBones.ArmatureDisplay;
        protected loadContent(): void;
        protected loadFromPackage(itemURL: string): void;
        setSpine(asset: sp.SkeletonData, anchor: Vec2, pma?: boolean): void;
        freeSpine(): void;
        setDragonBones(asset: dragonBones.DragonBonesAsset, atlasAsset: dragonBones.DragonBonesAtlasAsset, anchor: Vec2, pma?: boolean): void;
        freeDragonBones(): void;
        protected loadExternal(): void;
        protected handleSizeChanged(): void;
        protected handleAnchorChanged(): void;
        protected handleGrayedChanged(): void;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'drongo-cc/fairygui/GComponent' {
    import { Mask, Vec2, Node, Constructor } from "cc";
    import { Controller } from "drongo-cc/fairygui/Controller";
    import { IHitTest } from "drongo-cc/fairygui/event/HitTest";
    import { ChildrenRenderOrder, OverflowType } from "drongo-cc/fairygui/FieldTypes";
    import { GGroup } from "drongo-cc/fairygui/GGroup";
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { Margin } from "drongo-cc/fairygui/Margin";
    import { ScrollPane } from "drongo-cc/fairygui/ScrollPane";
    import { Transition } from "drongo-cc/fairygui/Transition";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class GComponent extends GObject {
        hitArea?: IHitTest;
        protected _margin: Margin;
        protected _trackBounds: boolean;
        protected _boundsChanged: boolean;
        protected _childrenRenderOrder: ChildrenRenderOrder;
        protected _apexIndex: number;
        _buildingDisplayList: boolean;
        _children: Array<GObject>;
        _controllers: Array<Controller>;
        _transitions: Array<Transition>;
        _container: Node;
        _scrollPane?: ScrollPane;
        _alignOffset: Vec2;
        _customMask?: Mask;
        constructor();
        dispose(): void;
        get displayListContainer(): Node;
        addChild(child: GObject): GObject;
        addChildAt(child: GObject, index: number): GObject;
        removeChild(child: GObject, dispose?: boolean): GObject;
        removeChildAt(index: number, dispose?: boolean): GObject;
        removeChildren(beginIndex?: number, endIndex?: number, dispose?: boolean): void;
        getChildAt<T extends GObject>(index: number, classType?: Constructor<T>): T;
        getChild<T extends GObject>(name: string, classType?: Constructor<T>): T;
        getChildByPath<T extends GObject>(path: String, classType?: Constructor<T>): T;
        getVisibleChild(name: string): GObject;
        getChildInGroup(name: string, group: GGroup): GObject;
        getChildById(id: string): GObject;
        getChildIndex(child: GObject): number;
        setChildIndex(child: GObject, index: number): void;
        setChildIndexBefore(child: GObject, index: number): number;
        swapChildren(child1: GObject, child2: GObject): void;
        swapChildrenAt(index1: number, index2: number): void;
        get numChildren(): number;
        isAncestorOf(child: GObject): boolean;
        addController(controller: Controller): void;
        getControllerAt(index: number): Controller;
        getController(name: string): Controller;
        removeController(c: Controller): void;
        get controllers(): Array<Controller>;
        applyController(c: Controller): void;
        applyAllControllers(): void;
        adjustRadioGroupDepth(obj: GObject, c: Controller): void;
        getTransitionAt(index: number): Transition;
        getTransition(transName: string): Transition;
        isChildInView(child: GObject): boolean;
        getFirstChildInView(): number;
        get scrollPane(): ScrollPane;
        get opaque(): boolean;
        set opaque(value: boolean);
        get margin(): Margin;
        set margin(value: Margin);
        get childrenRenderOrder(): ChildrenRenderOrder;
        set childrenRenderOrder(value: ChildrenRenderOrder);
        get apexIndex(): number;
        set apexIndex(value: number);
        get mask(): GObject;
        set mask(value: GObject);
        setMask(value: GObject, inverted: boolean): void;
        get _pivotCorrectX(): number;
        get _pivotCorrectY(): number;
        get baseUserData(): string;
        protected setupScroll(buffer: ByteBuffer): void;
        protected setupOverflow(overflow: OverflowType): void;
        protected handleAnchorChanged(): void;
        protected handleSizeChanged(): void;
        protected handleGrayedChanged(): void;
        handleControllerChanged(c: Controller): void;
        protected _hitTest(pt: Vec2, globalPt: Vec2): GObject;
        setBoundsChangedFlag(): void;
        ensureBoundsCorrect(): void;
        protected updateBounds(): void;
        setBounds(ax: number, ay: number, aw: number, ah?: number): void;
        get viewWidth(): number;
        set viewWidth(value: number);
        get viewHeight(): number;
        set viewHeight(value: number);
        getSnappingPosition(xValue: number, yValue: number, resultPoint?: Vec2): Vec2;
        childSortingOrderChanged(child: GObject, oldValue: number, newValue?: number): void;
        constructFromResource(): void;
        constructFromResource2(objectPool: Array<GObject>, poolIndex: number): void;
        protected constructExtension(buffer: ByteBuffer): void;
        protected onConstruct(): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
        protected onEnable(): void;
        protected onDisable(): void;
    }
}

declare module 'drongo-cc/fairygui/GLabel' {
    import { Color } from "cc";
    import { GComponent } from "drongo-cc/fairygui/GComponent";
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { GTextField } from "drongo-cc/fairygui/GTextField";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    export class GLabel extends GComponent {
        protected _titleObject: GObject;
        protected _iconObject: GObject;
        constructor();
        get icon(): ResURL | null;
        set icon(value: ResURL | null);
        get title(): string | null;
        set title(value: string | null);
        get text(): string | null;
        set text(value: string | null);
        get titleColor(): Color;
        set titleColor(value: Color);
        get titleFontSize(): number;
        set titleFontSize(value: number);
        set editable(val: boolean);
        get editable(): boolean;
        getTextField(): GTextField;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        protected constructExtension(buffer: ByteBuffer): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'drongo-cc/fairygui/GButton' {
    import { Color } from "cc";
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    import { Controller } from "drongo-cc/fairygui/Controller";
    import { ButtonMode } from "drongo-cc/fairygui/FieldTypes";
    import { GComponent } from "drongo-cc/fairygui/GComponent";
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { GTextField } from "drongo-cc/fairygui/GTextField";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class GButton extends GComponent {
        protected _titleObject: GObject;
        protected _iconObject: GObject;
        static UP: string;
        static DOWN: string;
        static OVER: string;
        static SELECTED_OVER: string;
        static DISABLED: string;
        static SELECTED_DISABLED: string;
        constructor();
        get icon(): ResURL | null;
        set icon(value: ResURL | null);
        get selectedIcon(): ResURL | null;
        set selectedIcon(value: ResURL | null);
        get title(): string | null;
        set title(value: string | null);
        get text(): string | null;
        set text(value: string | null);
        get selectedTitle(): string | null;
        set selectedTitle(value: string | null);
        get titleColor(): Color;
        set titleColor(value: Color);
        get titleFontSize(): number;
        set titleFontSize(value: number);
        get sound(): string | null;
        set sound(val: string | null);
        get soundVolumeScale(): number;
        set soundVolumeScale(value: number);
        set selected(val: boolean);
        get selected(): boolean;
        get mode(): ButtonMode;
        set mode(value: ButtonMode);
        get relatedController(): Controller;
        set relatedController(val: Controller);
        get relatedPageId(): string | null;
        set relatedPageId(val: string | null);
        get changeStateOnClick(): boolean;
        set changeStateOnClick(value: boolean);
        get linkedPopup(): GObject;
        set linkedPopup(value: GObject);
        getTextField(): GTextField;
        fireClick(): void;
        protected setState(val: string): void;
        protected setCurrentState(): void;
        handleControllerChanged(c: Controller): void;
        protected handleGrayedChanged(): void;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        protected constructExtension(buffer: ByteBuffer): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'drongo-cc/fairygui/GComboBox' {
    import { Color } from "cc";
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    import { Controller } from "drongo-cc/fairygui/Controller";
    import { PopupDirection } from "drongo-cc/fairygui/FieldTypes";
    import { GComponent } from "drongo-cc/fairygui/GComponent";
    import { GList } from "drongo-cc/fairygui/GList";
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { GTextField } from "drongo-cc/fairygui/GTextField";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class GComboBox extends GComponent {
        dropdown: GComponent;
        protected _titleObject: GObject;
        protected _iconObject: GObject;
        protected _list: GList;
        constructor();
        get text(): string | null;
        set text(value: string | null);
        get icon(): ResURL | null;
        set icon(value: ResURL | null);
        get titleColor(): Color;
        set titleColor(value: Color);
        get titleFontSize(): number;
        set titleFontSize(value: number);
        get visibleItemCount(): number;
        set visibleItemCount(value: number);
        get popupDirection(): PopupDirection;
        set popupDirection(value: PopupDirection);
        get items(): Array<string>;
        set items(value: Array<string>);
        get icons(): Array<string>;
        set icons(value: Array<string>);
        get values(): Array<string>;
        set values(value: Array<string>);
        get selectedIndex(): number;
        set selectedIndex(val: number);
        get value(): string | null;
        set value(val: string | null);
        get selectionController(): Controller;
        set selectionController(value: Controller);
        getTextField(): GTextField;
        protected setState(val: string): void;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        protected constructExtension(buffer: ByteBuffer): void;
        handleControllerChanged(c: Controller): void;
        dispose(): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
        protected showDropdown(): void;
    }
}

declare module 'drongo-cc/fairygui/GSlider' {
    import { ProgressTitleType } from "drongo-cc/fairygui/FieldTypes";
    import { GComponent } from "drongo-cc/fairygui/GComponent";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class GSlider extends GComponent {
        changeOnClick: boolean;
        canDrag: boolean;
        constructor();
        get titleType(): ProgressTitleType;
        set titleType(value: ProgressTitleType);
        get wholeNumbers(): boolean;
        set wholeNumbers(value: boolean);
        get min(): number;
        set min(value: number);
        get max(): number;
        set max(value: number);
        get value(): number;
        set value(value: number);
        update(): void;
        protected constructExtension(buffer: ByteBuffer): void;
        protected handleSizeChanged(): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'drongo-cc/fairygui/GProgressBar' {
    import { ProgressTitleType } from "drongo-cc/fairygui/FieldTypes";
    import { GComponent } from "drongo-cc/fairygui/GComponent";
    import { GTweener } from "drongo-cc/fairygui/tween/GTweener";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class GProgressBar extends GComponent {
        constructor();
        get titleType(): ProgressTitleType;
        set titleType(value: ProgressTitleType);
        get min(): number;
        set min(value: number);
        get max(): number;
        set max(value: number);
        get value(): number;
        set value(value: number);
        tweenValue(value: number, duration: number): GTweener;
        update(newValue: number): void;
        protected constructExtension(buffer: ByteBuffer): void;
        protected handleSizeChanged(): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'drongo-cc/fairygui/GScrollBar' {
    import { GComponent } from "drongo-cc/fairygui/GComponent";
    import { ScrollPane } from "drongo-cc/fairygui/ScrollPane";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class GScrollBar extends GComponent {
        constructor();
        setScrollPane(target: ScrollPane, vertical: boolean): void;
        setDisplayPerc(value: number): void;
        setScrollPerc(val: number): void;
        get minSize(): number;
        get gripDragging(): boolean;
        protected constructExtension(buffer: ByteBuffer): void;
    }
}

declare module 'drongo-cc/fairygui/GList' {
    import { Size, Vec2 } from "cc";
    import { Controller } from "drongo-cc/fairygui/Controller";
    import { FGUIEvent as FUIEvent } from "drongo-cc/fairygui/event/FGUIEvent";
    import { ListLayoutType, ListSelectionMode, AlignType, VertAlignType } from "drongo-cc/fairygui/FieldTypes";
    import { GComponent } from "drongo-cc/fairygui/GComponent";
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { GObjectPool } from "drongo-cc/fairygui/GObjectPool";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export type ListItemRenderer = (index: number, item: GObject) => void;
    export class GList extends GComponent {
        itemRenderer: ListItemRenderer;
        itemProvider: (index: number) => string;
        scrollItemToViewOnClick: boolean;
        foldInvisibleItems: boolean;
        constructor();
        dispose(): void;
        get layout(): ListLayoutType;
        set layout(value: ListLayoutType);
        get lineCount(): number;
        set lineCount(value: number);
        get columnCount(): number;
        set columnCount(value: number);
        get lineGap(): number;
        set lineGap(value: number);
        get columnGap(): number;
        set columnGap(value: number);
        get align(): AlignType;
        set align(value: AlignType);
        get verticalAlign(): VertAlignType;
        set verticalAlign(value: VertAlignType);
        get virtualItemSize(): Size;
        set virtualItemSize(value: Size);
        get defaultItem(): string | null;
        set defaultItem(val: string | null);
        get autoResizeItem(): boolean;
        set autoResizeItem(value: boolean);
        get selectionMode(): ListSelectionMode;
        set selectionMode(value: ListSelectionMode);
        get selectionController(): Controller;
        set selectionController(value: Controller);
        get itemPool(): GObjectPool;
        getFromPool(url?: string): GObject;
        returnToPool(obj: GObject): void;
        addChildAt(child: GObject, index: number): GObject;
        addItem(url?: string): GObject;
        addItemFromPool(url?: string): GObject;
        removeChildAt(index: number, dispose?: boolean): GObject;
        removeChildToPoolAt(index: number): void;
        removeChildToPool(child: GObject): void;
        removeChildrenToPool(beginIndex?: number, endIndex?: number): void;
        get selectedIndex(): number;
        set selectedIndex(value: number);
        getSelection(result?: number[]): number[];
        addSelection(index: number, scrollItToView?: boolean): void;
        removeSelection(index: number): void;
        clearSelection(): void;
        selectAll(): void;
        selectNone(): void;
        selectReverse(): void;
        handleArrowKey(dir: number): void;
        protected dispatchItemEvent(item: GObject, evt: FUIEvent): void;
        resizeToFit(itemCount?: number, minSize?: number): void;
        getMaxItemWidth(): number;
        protected handleSizeChanged(): void;
        handleControllerChanged(c: Controller): void;
        getSnappingPosition(xValue: number, yValue: number, resultPoint?: Vec2): Vec2;
        scrollToView(index: number, ani?: boolean, setFirst?: boolean): void;
        getFirstChildInView(): number;
        childIndexToItemIndex(index: number): number;
        itemIndexToChildIndex(index: number): number;
        setVirtual(): void;
        setVirtualAndLoop(): void;
        get numItems(): number;
        set numItems(value: number);
        refreshVirtualList(): void;
        protected updateBounds(): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
        protected readItems(buffer: ByteBuffer): void;
        protected setupItem(buffer: ByteBuffer, obj: GObject): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'drongo-cc/fairygui/GTree' {
    import { FGUIEvent as FUIEvent } from "drongo-cc/fairygui/event/FGUIEvent";
    import { GComponent } from "drongo-cc/fairygui/GComponent";
    import { GList } from "drongo-cc/fairygui/GList";
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { GTreeNode } from "drongo-cc/fairygui/GTreeNode";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class GTree extends GList {
        treeNodeRender: (node: GTreeNode, obj: GComponent) => void;
        treeNodeWillExpand: (node: GTreeNode, expanded: boolean) => void;
        constructor();
        get rootNode(): GTreeNode;
        get indent(): number;
        set indent(value: number);
        get clickToExpand(): number;
        set clickToExpand(value: number);
        getSelectedNode(): GTreeNode;
        getSelectedNodes(result?: Array<GTreeNode>): Array<GTreeNode>;
        selectNode(node: GTreeNode, scrollItToView?: boolean): void;
        unselectNode(node: GTreeNode): void;
        expandAll(folderNode?: GTreeNode): void;
        collapseAll(folderNode?: GTreeNode): void;
        _afterInserted(node: GTreeNode): void;
        _afterRemoved(node: GTreeNode): void;
        _afterExpanded(node: GTreeNode): void;
        _afterCollapsed(node: GTreeNode): void;
        _afterMoved(node: GTreeNode): void;
        protected dispatchItemEvent(item: GObject, evt: FUIEvent): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
        protected readItems(buffer: ByteBuffer): void;
    }
}

declare module 'drongo-cc/fairygui/GTreeNode' {
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    import { GComponent } from "drongo-cc/fairygui/GComponent";
    import { GTree } from "drongo-cc/fairygui/GTree";
    export class GTreeNode {
        data?: any;
        _cell: GComponent;
        _resURL?: string;
        constructor(hasChild?: boolean, resURL?: string);
        set expanded(value: boolean);
        get expanded(): boolean;
        get isFolder(): boolean;
        get parent(): GTreeNode;
        get text(): string | null;
        set text(value: string | null);
        get icon(): ResURL | null;
        set icon(value: ResURL | null);
        get cell(): GComponent;
        get level(): number;
        _setLevel(value: number): void;
        addChild(child: GTreeNode): GTreeNode;
        addChildAt(child: GTreeNode, index: number): GTreeNode;
        removeChild(child: GTreeNode): GTreeNode;
        removeChildAt(index: number): GTreeNode;
        removeChildren(beginIndex?: number, endIndex?: number): void;
        getChildAt(index: number): GTreeNode;
        getChildIndex(child: GTreeNode): number;
        getPrevSibling(): GTreeNode;
        getNextSibling(): GTreeNode;
        setChildIndex(child: GTreeNode, index: number): void;
        swapChildren(child1: GTreeNode, child2: GTreeNode): void;
        swapChildrenAt(index1: number, index2: number): void;
        get numChildren(): number;
        expandToRoot(): void;
        get tree(): GTree;
        _setTree(value: GTree): void;
    }
}

declare module 'drongo-cc/fairygui/Window' {
    import { GComponent } from "drongo-cc/fairygui/GComponent";
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { GRoot } from "drongo-cc/fairygui/GRoot";
    export interface IUISource {
        fileName: string;
        loaded: boolean;
        load(callback: () => void, target: any): void;
    }
    export class Window extends GComponent {
        protected _requestingCmd: number;
        bringToFontOnClick: boolean;
        constructor();
        addUISource(source: IUISource): void;
        set contentPane(val: GComponent);
        get contentPane(): GComponent;
        get frame(): GComponent;
        get closeButton(): GObject;
        set closeButton(value: GObject);
        get dragArea(): GObject;
        set dragArea(value: GObject);
        get contentArea(): GObject;
        set contentArea(value: GObject);
        show(): void;
        showOn(root: GRoot): void;
        hide(): void;
        hideImmediately(): void;
        centerOn(r: GRoot, restraint?: boolean): void;
        toggleStatus(): void;
        get isShowing(): boolean;
        get isTop(): boolean;
        get modal(): boolean;
        set modal(val: boolean);
        bringToFront(): void;
        showModalWait(requestingCmd?: number): void;
        protected layoutModalWaitPane(): void;
        closeModalWait(requestingCmd?: number): boolean;
        get modalWaiting(): boolean;
        init(): void;
        protected onInit(): void;
        protected onShown(): void;
        protected onHide(): void;
        protected doShowAnimation(): void;
        protected doHideAnimation(): void;
        dispose(): void;
        protected closeEventHandler(evt: Event): void;
        protected onEnable(): void;
        protected onDisable(): void;
    }
}

declare module 'drongo-cc/fairygui/PopupMenu' {
    import { PopupDirection } from "drongo-cc/fairygui/FieldTypes";
    import { GButton } from "drongo-cc/fairygui/GButton";
    import { GComponent } from "drongo-cc/fairygui/GComponent";
    import { GList } from "drongo-cc/fairygui/GList";
    import { GObject } from "drongo-cc/fairygui/GObject";
    export class PopupMenu {
        protected _contentPane: GComponent;
        protected _list: GList;
        constructor(url?: string);
        dispose(): void;
        addItem(caption: string, callback?: (item?: GObject, evt?: Event) => void): GButton;
        addItemAt(caption: string, index: number, callback?: (item?: GObject, evt?: Event) => void): GButton;
        addSeperator(): void;
        getItemName(index: number): string;
        setItemText(name: string, caption: string): void;
        setItemVisible(name: string, visible: boolean): void;
        setItemGrayed(name: string, grayed: boolean): void;
        setItemCheckable(name: string, checkable: boolean): void;
        setItemChecked(name: string, checked: boolean): void;
        isItemChecked(name: string): boolean;
        removeItem(name: string): boolean;
        clearItems(): void;
        get itemCount(): number;
        get contentPane(): GComponent;
        get list(): GList;
        show(target?: GObject | null, dir?: PopupDirection | boolean): void;
    }
}

declare module 'drongo-cc/fairygui/Controller' {
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class Controller extends EventTarget {
        name: string;
        parent: GComponent;
        autoRadioGroupDepth?: boolean;
        changing?: boolean;
        constructor();
        dispose(): void;
        get selectedIndex(): number;
        set selectedIndex(value: number);
        onChanged<TFunction extends (...any: any[]) => void>(callback: TFunction, thisArg?: any): void;
        offChanged<TFunction extends (...any: any[]) => void>(callback: TFunction, thisArg?: any): void;
        setSelectedIndex(value: number): void;
        get previsousIndex(): number;
        get selectedPage(): string;
        set selectedPage(val: string);
        setSelectedPage(value: string): void;
        get previousPage(): string;
        get pageCount(): number;
        getPageName(index: number): string;
        addPage(name?: string): void;
        addPageAt(name?: string, index?: number): void;
        removePage(name: string): void;
        removePageAt(index: number): void;
        clearPages(): void;
        hasPage(aName: string): boolean;
        getPageIndexById(aId: string): number;
        getPageIdByName(aName: string): string | null;
        getPageNameById(aId: string): string | null;
        getPageId(index: number): string | null;
        get selectedPageId(): string | null;
        set selectedPageId(val: string | null);
        set oppositePageId(val: string | null);
        get previousPageId(): string | null;
        runActions(): void;
        setup(buffer: ByteBuffer): void;
    }
    import { EventTarget } from "cc";
    import { GComponent } from "drongo-cc/fairygui/GComponent";
}

declare module 'drongo-cc/fairygui/Transition' {
    import { GComponent } from "drongo-cc/fairygui/GComponent";
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class Transition {
        name: string;
        constructor(owner: GComponent);
        play(onComplete?: (() => void) | null, times?: number, delay?: number, startTime?: number, endTime?: number): void;
        playReverse(onComplete?: (() => void) | null, times?: number, delay?: number): void;
        changePlayTimes(value: number): void;
        setAutoPlay(value: boolean, times?: number, delay?: number): void;
        stop(setToComplete?: boolean, processCallback?: boolean): void;
        setPaused(paused: boolean): void;
        dispose(): void;
        get playing(): boolean;
        setValue(label: string, ...args: any[]): void;
        setHook(label: string, callback: (label?: string) => void): void;
        clearHooks(): void;
        setTarget(label: string, newTarget: GObject): void;
        setDuration(label: string, value: number): void;
        getLabelTime(label: string): number;
        get timeScale(): number;
        set timeScale(value: number);
        updateFromRelations(targetId: string, dx: number, dy: number): void;
        onEnable(): void;
        onDisable(): void;
        setup(buffer: ByteBuffer): void;
    }
}

declare module 'drongo-cc/fairygui/ScrollPane' {
    import { Component, Vec2 } from "cc";
    import { Controller } from "drongo-cc/fairygui/Controller";
    import { GComponent } from "drongo-cc/fairygui/GComponent";
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { GScrollBar } from "drongo-cc/fairygui/GScrollBar";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class ScrollPane extends Component {
        _displayInDemand?: boolean;
        _loop: number;
        static draggingPane: ScrollPane;
        setup(buffer: ByteBuffer): void;
        protected onDestroy(): void;
        hitTest(pt: Vec2, globalPt: Vec2): GObject;
        get owner(): GComponent;
        get hzScrollBar(): GScrollBar;
        get vtScrollBar(): GScrollBar;
        get header(): GComponent;
        get footer(): GComponent;
        get bouncebackEffect(): boolean;
        set bouncebackEffect(sc: boolean);
        get touchEffect(): boolean;
        set touchEffect(sc: boolean);
        set scrollStep(val: number);
        get decelerationRate(): number;
        set decelerationRate(val: number);
        get scrollStep(): number;
        get snapToItem(): boolean;
        set snapToItem(value: boolean);
        get snappingPolicy(): number;
        set snappingPolicy(value: number);
        get mouseWheelEnabled(): boolean;
        set mouseWheelEnabled(value: boolean);
        get isDragged(): boolean;
        get percX(): number;
        set percX(value: number);
        setPercX(value: number, ani?: boolean): void;
        get percY(): number;
        set percY(value: number);
        setPercY(value: number, ani?: boolean): void;
        get posX(): number;
        set posX(value: number);
        setPosX(value: number, ani?: boolean): void;
        get posY(): number;
        set posY(value: number);
        setPosY(value: number, ani?: boolean): void;
        get contentWidth(): number;
        get contentHeight(): number;
        get viewWidth(): number;
        set viewWidth(value: number);
        get viewHeight(): number;
        set viewHeight(value: number);
        get currentPageX(): number;
        set currentPageX(value: number);
        get currentPageY(): number;
        set currentPageY(value: number);
        setCurrentPageX(value: number, ani?: boolean): void;
        setCurrentPageY(value: number, ani?: boolean): void;
        get isBottomMost(): boolean;
        get isRightMost(): boolean;
        get pageController(): Controller;
        set pageController(value: Controller);
        get scrollingPosX(): number;
        get scrollingPosY(): number;
        scrollTop(ani?: boolean): void;
        scrollBottom(ani?: boolean): void;
        scrollUp(ratio?: number, ani?: boolean): void;
        scrollDown(ratio?: number, ani?: boolean): void;
        scrollLeft(ratio?: number, ani?: boolean): void;
        scrollRight(ratio?: number, ani?: boolean): void;
        scrollToView(target: any, ani?: boolean, setFirst?: boolean): void;
        isChildInView(obj: GObject): boolean;
        cancelDragging(): void;
        lockHeader(size: number): void;
        lockFooter(size: number): void;
        onOwnerSizeChanged(): void;
        handleControllerChanged(c: Controller): void;
        adjustMaskContainer(): void;
        setSize(aWidth: number, aHeight: number): void;
        setContentSize(aWidth: number, aHeight: number): void;
        changeContentSizeOnScrolling(deltaWidth: number, deltaHeight: number, deltaPosX: number, deltaPosY: number): void;
        updateScrollBarVisible(): void;
        protected update(dt: number): boolean;
    }
}

declare module 'drongo-cc/fairygui/FieldTypes' {
    export enum ButtonMode {
        Common = 0,
        Check = 1,
        Radio = 2
    }
    export enum AutoSizeType {
        None = 0,
        Both = 1,
        Height = 2,
        Shrink = 3
    }
    export enum AlignType {
        Left = 0,
        Center = 1,
        Right = 2
    }
    export enum VertAlignType {
        Top = 0,
        Middle = 1,
        Bottom = 2
    }
    export enum LoaderFillType {
        None = 0,
        Scale = 1,
        ScaleMatchHeight = 2,
        ScaleMatchWidth = 3,
        ScaleFree = 4,
        ScaleNoBorder = 5
    }
    export enum ListLayoutType {
        SingleColumn = 0,
        SingleRow = 1,
        FlowHorizontal = 2,
        FlowVertical = 3,
        Pagination = 4
    }
    export enum ListSelectionMode {
        Single = 0,
        Multiple = 1,
        Multiple_SingleClick = 2,
        None = 3
    }
    export enum OverflowType {
        Visible = 0,
        Hidden = 1,
        Scroll = 2
    }
    export enum PackageItemType {
        Image = 0,
        MovieClip = 1,
        Sound = 2,
        Component = 3,
        Atlas = 4,
        Font = 5,
        Swf = 6,
        Misc = 7,
        Unknown = 8,
        Spine = 9,
        DragonBones = 10
    }
    export enum ObjectType {
        Image = 0,
        MovieClip = 1,
        Swf = 2,
        Graph = 3,
        Loader = 4,
        Group = 5,
        Text = 6,
        RichText = 7,
        InputText = 8,
        Component = 9,
        List = 10,
        Label = 11,
        Button = 12,
        ComboBox = 13,
        ProgressBar = 14,
        Slider = 15,
        ScrollBar = 16,
        Tree = 17,
        Loader3D = 18
    }
    export enum ProgressTitleType {
        Percent = 0,
        ValueAndMax = 1,
        Value = 2,
        Max = 3
    }
    export enum ScrollBarDisplayType {
        Default = 0,
        Visible = 1,
        Auto = 2,
        Hidden = 3
    }
    export enum ScrollType {
        Horizontal = 0,
        Vertical = 1,
        Both = 2
    }
    export enum FlipType {
        None = 0,
        Horizontal = 1,
        Vertical = 2,
        Both = 3
    }
    export enum ChildrenRenderOrder {
        Ascent = 0,
        Descent = 1,
        Arch = 2
    }
    export enum GroupLayoutType {
        None = 0,
        Horizontal = 1,
        Vertical = 2
    }
    export enum PopupDirection {
        Auto = 0,
        Up = 1,
        Down = 2
    }
    export enum RelationType {
        Left_Left = 0,
        Left_Center = 1,
        Left_Right = 2,
        Center_Center = 3,
        Right_Left = 4,
        Right_Center = 5,
        Right_Right = 6,
        Top_Top = 7,
        Top_Middle = 8,
        Top_Bottom = 9,
        Middle_Middle = 10,
        Bottom_Top = 11,
        Bottom_Middle = 12,
        Bottom_Bottom = 13,
        Width = 14,
        Height = 15,
        LeftExt_Left = 16,
        LeftExt_Right = 17,
        RightExt_Left = 18,
        RightExt_Right = 19,
        TopExt_Top = 20,
        TopExt_Bottom = 21,
        BottomExt_Top = 22,
        BottomExt_Bottom = 23,
        Size = 24
    }
    export enum FillMethod {
        None = 0,
        Horizontal = 1,
        Vertical = 2,
        Radial90 = 3,
        Radial180 = 4,
        Radial360 = 5
    }
    export enum FillOrigin {
        Top = 0,
        Bottom = 1,
        Left = 2,
        Right = 3
    }
    export enum ObjectPropID {
        Text = 0,
        Icon = 1,
        Color = 2,
        OutlineColor = 3,
        Playing = 4,
        Frame = 5,
        DeltaTime = 6,
        TimeScale = 7,
        FontSize = 8,
        Selected = 9
    }
}

declare module 'drongo-cc/fairygui/UIPackage' {
    import { Asset, AssetManager } from "cc";
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { PackageItem } from "drongo-cc/fairygui/PackageItem";
    type PackageDependency = {
            id: string;
            name: string;
    };
    export class UIPackage {
            _branchIndex: number;
            constructor();
            static get branch(): string | null;
            static set branch(value: string | null);
            static getVar(key: string): string | null;
            static setVar(key: string, value: string | null): void;
            static getById(id: string): UIPackage;
            static getByName(name: string): UIPackage;
            /**
                * 注册一个包。包的所有资源必须放在resources下，且已经预加载。
                * @param path 相对 resources 的路径。
                */
            static addPackage(path: string): UIPackage;
            /**
                * 载入一个包。包的资源从Asset Bundle加载.
                * @param bundle Asset Bundle 对象.
                * @param path 资源相对 Asset Bundle 目录的路径.
                * @param onComplete 载入成功后的回调.
                */
            static loadPackage(bundle: AssetManager.Bundle, path: string, onComplete?: (error: any, pkg: UIPackage) => void): void;
            /**
                * 载入一个包。包的资源从Asset Bundle加载.
                * @param bundle Asset Bundle 对象.
                * @param path 资源相对 Asset Bundle 目录的路径.
                * @param onProgress 加载进度回调.
                * @param onComplete 载入成功后的回调.
                */
            static loadPackage(bundle: AssetManager.Bundle, path: string, onProgress?: (finish: number, total: number, item: AssetManager.RequestItem) => void, onComplete?: (error: any, pkg: UIPackage) => void): void;
            /**
                * 载入一个包。包的资源从resources加载.
                * @param path 资源相对 resources 的路径.
                * @param onComplete 载入成功后的回调.
                */
            static loadPackage(path: string, onComplete?: (error: any, pkg: UIPackage) => void): void;
            /**
                * 载入一个包。包的资源从resources加载.
                * @param path 资源相对 resources 的路径.
                * @param onProgress 加载进度回调.
                * @param onComplete 载入成功后的回调.
                */
            static loadPackage(path: string, onProgress?: (finish: number, total: number, item: AssetManager.RequestItem) => void, onComplete?: (error: Error, pkg: UIPackage) => void): void;
            static removePackage(packageIdOrName: string): void;
            static createObject(pkgName: string, resName: string, userClass?: new () => GObject): GObject;
            static createObjectFromURL(url: string, userClass?: new () => GObject): GObject;
            static getItemURL(pkgName: string, resName: string): string;
            static getItemByURL(url: string): PackageItem;
            static normalizeURL(url: string): string;
            static setStringsSource(source: string): void;
            dispose(): void;
            get id(): string;
            get name(): string;
            get path(): string;
            get dependencies(): Array<PackageDependency>;
            createObject(resName: string, userClass?: new () => GObject): GObject;
            internalCreateObject(item: PackageItem, userClass?: new () => GObject): GObject;
            getItemById(itemId: string): PackageItem;
            getItemByName(resName: string): PackageItem;
            getItemAssetByName(resName: string): Asset;
            getItemAsset(item: PackageItem): Asset;
            getItemAssetAsync(item: PackageItem, onComplete?: (err: Error, item: PackageItem) => void): void;
            loadAllAssets(): void;
    }
    export interface IObjectFactoryType {
            resolveExtension(pi: PackageItem): void;
            newObject(type: number | PackageItem, userClass?: new () => GObject): GObject;
    }
    export var Decls: {
            UIObjectFactory?: IObjectFactoryType;
    };
    export {};
}

declare module 'drongo-cc/fairygui/PackageItem' {
    import { Asset, dragonBones, Rect, Vec2 } from "cc";
    import { Frame } from "drongo-cc/fairygui/display/MovieClip";
    import { PixelHitTestData } from "drongo-cc/fairygui/event/HitTest";
    import { PackageItemType, ObjectType } from "drongo-cc/fairygui/FieldTypes";
    import { UIPackage } from "drongo-cc/fairygui/UIPackage";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class PackageItem {
        owner: UIPackage;
        type: PackageItemType;
        objectType?: ObjectType;
        id: string;
        name: string;
        width: number;
        height: number;
        file: string;
        decoded?: boolean;
        loading?: Array<Function>;
        rawData?: ByteBuffer;
        asset?: Asset;
        highResolution?: Array<string>;
        branches?: Array<string>;
        scale9Grid?: Rect;
        scaleByTile?: boolean;
        tileGridIndice?: number;
        smoothing?: boolean;
        hitTestData?: PixelHitTestData;
        interval?: number;
        repeatDelay?: number;
        swing?: boolean;
        frames?: Array<Frame>;
        extensionType?: any;
        skeletonAnchor?: Vec2;
        atlasAsset?: dragonBones.DragonBonesAtlasAsset;
        constructor();
        load(): Asset;
        getBranch(): PackageItem;
        getHighResolution(): PackageItem;
        toString(): string;
    }
}

declare module 'drongo-cc/fairygui/GObjectPool' {
    import { GObject } from "drongo-cc/fairygui/GObject";
    export class GObjectPool {
        constructor();
        clear(): void;
        get count(): number;
        getObject(url: string): GObject;
        returnObject(obj: GObject): void;
    }
}

declare module 'drongo-cc/fairygui/UIObjectFactory' {
    import { GComponent } from "drongo-cc/fairygui/GComponent";
    import { GLoader } from "drongo-cc/fairygui/GLoader";
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { PackageItem } from "drongo-cc/fairygui/PackageItem";
    export class UIObjectFactory {
        static counter: number;
        static extensions: {
            [index: string]: new () => GComponent;
        };
        static loaderType: new () => GLoader;
        constructor();
        static setExtension(url: string, type: new () => GComponent): void;
        static setLoaderExtension(type: new () => GLoader): void;
        static resolveExtension(pi: PackageItem): void;
        static newObject(type: number | PackageItem, userClass?: new () => GObject): GObject;
    }
}

declare module 'drongo-cc/fairygui/UIConfig' {
    import { AssetManager, Color, Font } from "cc";
    import { ITooltipsManager as ITooltipsManager } from "drongo-cc/fairygui/tooltips/ITooltipManager";
    export class UIConfig {
        constructor();
        static defaultFont: string;
        static windowModalWaiting: string;
        static globalModalWaiting: string;
        static modalLayerColor: Color;
        static buttonSound: string;
        static buttonSoundVolumeScale: number;
        static horizontalScrollBar: string;
        static verticalScrollBar: string;
        static defaultScrollStep: number;
        static defaultScrollDecelerationRate: number;
        static defaultScrollBarDisplay: number;
        static defaultScrollTouchEffect: boolean;
        static defaultScrollBounceEffect: boolean;
        static popupMenu: string;
        static popupMenu_seperator: string;
        static loaderErrorSign: string;
        static tooltipsWin: string;
        /**提示管理器 */
        static tooltipsManager: ITooltipsManager;
        static defaultComboBoxVisibleItemCount: number;
        static touchScrollSensitivity: number;
        static touchDragSensitivity: number;
        static clickDragSensitivity: number;
        static bringWindowToFrontOnClick: boolean;
        static frameTimeForAsyncUIConstruction: number;
        static linkUnderline: boolean;
        static defaultUILayer: number;
    }
    export function registerFont(name: string, font: Font | string, bundle?: AssetManager.Bundle): void;
    export function getFontByName(name: string): Font;
}

declare module 'drongo-cc/fairygui/DragDropManager' {
    import { GObject } from "drongo-cc/fairygui/GObject";
    export class DragDropManager {
        static get inst(): DragDropManager;
        constructor();
        get dragAgent(): GObject;
        get dragging(): boolean;
        startDrag(source: GObject, icon: string | null, sourceData?: any, touchId?: number): void;
        cancel(): void;
    }
}

declare module 'drongo-cc/fairygui/AsyncOperation' {
    import { GObject } from "drongo-cc/fairygui/GObject";
    export class AsyncOperation {
        callback: (obj: GObject) => void;
        createObject(pkgName: string, resName: string): void;
        createObjectFromURL(url: string): void;
        cancel(): void;
    }
}

declare module 'drongo-cc/fairygui/TranslationHelper' {
    import { PackageItem } from "drongo-cc/fairygui/PackageItem";
    export class TranslationHelper {
        static strings: {
            [index: string]: {
                [index: string]: string;
            };
        };
        static loadFromXML(source: string): void;
        static translateComponent(item: PackageItem): void;
    }
}

declare module 'drongo-cc/fairygui/gears/GearAnimation' {
    import { GearBase } from "drongo-cc/fairygui/gears/GearBase";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class GearAnimation extends GearBase {
        protected init(): void;
        protected addStatus(pageId: string, buffer: ByteBuffer): void;
        apply(): void;
        updateState(): void;
    }
}

declare module 'drongo-cc/fairygui/gears/GearBase' {
    import { Controller } from "drongo-cc/fairygui/Controller";
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { GTweener } from "drongo-cc/fairygui/tween/GTweener";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class GearBase {
        static disableAllTweenEffect?: boolean;
        _owner: GObject;
        protected _controller: Controller;
        protected _tweenConfig: GearTweenConfig;
        dispose(): void;
        get controller(): Controller;
        set controller(val: Controller);
        get tweenConfig(): GearTweenConfig;
        protected get allowTween(): boolean;
        setup(buffer: ByteBuffer): void;
        updateFromRelations(dx: number, dy: number): void;
        protected addStatus(pageId: string, buffer: ByteBuffer): void;
        protected init(): void;
        apply(): void;
        updateState(): void;
    }
    export class GearTweenConfig {
        tween: boolean;
        easeType: number;
        duration: number;
        delay: number;
        _displayLockToken: number;
        _tweener: GTweener;
        constructor();
    }
    export interface IGearXY {
    }
}

declare module 'drongo-cc/fairygui/gears/GearColor' {
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    import { GearBase } from "drongo-cc/fairygui/gears/GearBase";
    export class GearColor extends GearBase {
        protected init(): void;
        protected addStatus(pageId: string, buffer: ByteBuffer): void;
        apply(): void;
        updateState(): void;
    }
}

declare module 'drongo-cc/fairygui/gears/GearDisplay' {
    import { GearBase } from "drongo-cc/fairygui/gears/GearBase";
    export class GearDisplay extends GearBase {
        pages: string[];
        protected init(): void;
        addLock(): number;
        releaseLock(token: number): void;
        get connected(): boolean;
        apply(): void;
    }
}

declare module 'drongo-cc/fairygui/gears/GearDisplay2' {
    import { GearBase } from "drongo-cc/fairygui/gears/GearBase";
    export class GearDisplay2 extends GearBase {
        pages: string[];
        condition: number;
        protected init(): void;
        apply(): void;
        evaluate(connected: boolean): boolean;
    }
}

declare module 'drongo-cc/fairygui/gears/GearFontSize' {
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    import { GearBase } from "drongo-cc/fairygui/gears/GearBase";
    export class GearFontSize extends GearBase {
        protected init(): void;
        protected addStatus(pageId: string, buffer: ByteBuffer): void;
        apply(): void;
        updateState(): void;
    }
}

declare module 'drongo-cc/fairygui/gears/GearIcon' {
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    import { GearBase } from "drongo-cc/fairygui/gears/GearBase";
    export class GearIcon extends GearBase {
        protected init(): void;
        protected addStatus(pageId: string, buffer: ByteBuffer): void;
        apply(): void;
        updateState(): void;
    }
}

declare module 'drongo-cc/fairygui/gears/GearLook' {
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    import { GearBase } from "drongo-cc/fairygui/gears/GearBase";
    export class GearLook extends GearBase {
        protected init(): void;
        protected addStatus(pageId: string, buffer: ByteBuffer): void;
        apply(): void;
        updateState(): void;
    }
}

declare module 'drongo-cc/fairygui/gears/GearSize' {
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    import { GearBase } from "drongo-cc/fairygui/gears/GearBase";
    export class GearSize extends GearBase {
        protected init(): void;
        protected addStatus(pageId: string, buffer: ByteBuffer): void;
        apply(): void;
        updateState(): void;
        updateFromRelations(dx: number, dy: number): void;
    }
}

declare module 'drongo-cc/fairygui/gears/GearText' {
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    import { GearBase } from "drongo-cc/fairygui/gears/GearBase";
    export class GearText extends GearBase {
        protected init(): void;
        protected addStatus(pageId: string, buffer: ByteBuffer): void;
        apply(): void;
        updateState(): void;
    }
}

declare module 'drongo-cc/fairygui/gears/GearXY' {
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    import { GearBase } from "drongo-cc/fairygui/gears/GearBase";
    export class GearXY extends GearBase {
        positionsInPercent: boolean;
        protected init(): void;
        protected addStatus(pageId: string, buffer: ByteBuffer): void;
        addExtStatus(pageId: string, buffer: ByteBuffer): void;
        apply(): void;
        updateState(): void;
        updateFromRelations(dx: number, dy: number): void;
    }
}

declare module 'drongo-cc/fairygui/display/BlendMode' {
    import { Node } from "cc";
    export enum BlendMode {
        Normal = 0,
        None = 1,
        Add = 2,
        Multiply = 3,
        Screen = 4,
        Erase = 5,
        Mask = 6,
        Below = 7,
        Off = 8,
        Custom1 = 9,
        Custom2 = 10,
        Custom3 = 11
    }
    export class BlendModeUtils {
        static apply(node: Node, blendMode: BlendMode): void;
        static override(blendMode: BlendMode, srcFactor: number, dstFactor: number): void;
    }
}

declare module 'drongo-cc/fairygui/display/Image' {
    import { Sprite } from "cc";
    import { FillMethod, FillOrigin, FlipType } from "drongo-cc/fairygui/FieldTypes";
    export class Image extends Sprite {
        constructor();
        get flip(): FlipType;
        set flip(value: FlipType);
        get fillMethod(): FillMethod;
        set fillMethod(value: FillMethod);
        get fillOrigin(): FillOrigin;
        set fillOrigin(value: FillOrigin);
        get fillClockwise(): boolean;
        set fillClockwise(value: boolean);
        get fillAmount(): number;
        set fillAmount(value: number);
    }
}

declare module 'drongo-cc/fairygui/display/MovieClip' {
    import { Rect, SpriteFrame } from "cc";
    import { Image } from "drongo-cc/fairygui/display/Image";
    export interface Frame {
        rect: Rect;
        addDelay: number;
        texture: SpriteFrame | null;
    }
    export class MovieClip extends Image {
        interval: number;
        swing: boolean;
        repeatDelay: number;
        timeScale: number;
        constructor();
        get frames(): Array<Frame>;
        set frames(value: Array<Frame>);
        get frameCount(): number;
        get frame(): number;
        set frame(value: number);
        get playing(): boolean;
        set playing(value: boolean);
        get smoothing(): boolean;
        set smoothing(value: boolean);
        rewind(): void;
        syncStatus(anotherMc: MovieClip): void;
        advance(timeInSeconds: number): void;
        setPlaySettings(start?: number, end?: number, times?: number, endAt?: number, endCallback?: (() => void) | null): void;
        protected update(dt: number): void;
    }
}

declare module 'drongo-cc/fairygui/event/FGUIEvent' {
    import { Event as CCEvent, Vec2 } from 'cc';
    import { GObject } from 'drongo-cc/fairygui/GObject';
    import { InputProcessor } from 'drongo-cc/fairygui/event/InputProcessor';
    export class FGUIEvent extends CCEvent {
        static TOUCH_BEGIN: string;
        static TOUCH_MOVE: string;
        static TOUCH_END: string;
        static CLICK: string;
        static ROLL_OVER: string;
        static ROLL_OUT: string;
        static MOUSE_WHEEL: string;
        static DISPLAY: string;
        static UNDISPLAY: string;
        static GEAR_STOP: string;
        static LINK: string;
        static Submit: string;
        static TEXT_CHANGE: string;
        static STATUS_CHANGED: string;
        static XY_CHANGED: string;
        static SIZE_CHANGED: string;
        static SIZE_DELAY_CHANGE: string;
        static DRAG_START: string;
        static DRAG_MOVE: string;
        static DRAG_END: string;
        static DROP: string;
        static SCROLL: string;
        static SCROLL_END: string;
        static PULL_DOWN_RELEASE: string;
        static PULL_UP_RELEASE: string;
        static CLICK_ITEM: string;
        initiator: GObject;
        pos: Vec2;
        touchId: number;
        clickCount: number;
        button: number;
        keyModifiers: number;
        mouseWheelDelta: number;
        _processor: InputProcessor;
        constructor(type: string, bubbles: boolean);
        get sender(): GObject | null;
        get isShiftDown(): boolean;
        get isCtrlDown(): boolean;
        captureTouch(): void;
    }
    export function borrowEvent(type: string, bubbles?: boolean): FGUIEvent;
    export function returnEvent(evt: FGUIEvent): void;
}

declare module 'drongo-cc/fairygui/tween/GTween' {
    import { GTweener } from "drongo-cc/fairygui/tween/GTweener";
    export class GTween {
        static catchCallbackExceptions: boolean;
        static to(start: number, end: number, duration: number): GTweener;
        static to2(start: number, start2: number, end: number, end2: number, duration: number): GTweener;
        static to3(start: number, start2: number, start3: number, end: number, end2: number, end3: number, duration: number): GTweener;
        static to4(start: number, start2: number, start3: number, start4: number, end: number, end2: number, end3: number, end4: number, duration: number): GTweener;
        static toColor(start: number, end: number, duration: number): GTweener;
        static delayedCall(delay: number): GTweener;
        static shake(startX: number, startY: number, amplitude: number, duration: number): GTweener;
        static isTweening(target: any, propType?: any): Boolean;
        static kill(target: any, complete?: boolean, propType?: any): void;
        static getTween(target: any, propType?: any): GTweener;
    }
}

declare module 'drongo-cc/fairygui/tween/GTweener' {
    import { GPath } from "drongo-cc/fairygui/tween/GPath";
    import { TweenValue } from "drongo-cc/fairygui/tween/TweenValue";
    export class GTweener {
        _target: any;
        _propType: any;
        _killed: boolean;
        _paused: boolean;
        constructor();
        setDelay(value: number): GTweener;
        get delay(): number;
        setDuration(value: number): GTweener;
        get duration(): number;
        setBreakpoint(value: number): GTweener;
        setEase(value: number): GTweener;
        setEasePeriod(value: number): GTweener;
        setEaseOvershootOrAmplitude(value: number): GTweener;
        setRepeat(repeat: number, yoyo?: boolean): GTweener;
        get repeat(): number;
        setTimeScale(value: number): GTweener;
        setSnapping(value: boolean): GTweener;
        setTarget(value: any, propType?: any): GTweener;
        get target(): any;
        setPath(value: GPath): GTweener;
        setUserData(value: any): GTweener;
        get userData(): any;
        onUpdate(callback: Function, target?: any): GTweener;
        onStart(callback: Function, target?: any): GTweener;
        onComplete(callback: Function, target?: any): GTweener;
        get startValue(): TweenValue;
        get endValue(): TweenValue;
        get value(): TweenValue;
        get deltaValue(): TweenValue;
        get normalizedTime(): number;
        get completed(): boolean;
        get allCompleted(): boolean;
        setPaused(paused: boolean): GTweener;
        /**
          * seek position of the tween, in seconds.
          */
        seek(time: number): void;
        kill(complete?: boolean): void;
        _to(start: number, end: number, duration: number): GTweener;
        _to2(start: number, start2: number, end: number, end2: number, duration: number): GTweener;
        _to3(start: number, start2: number, start3: number, end: number, end2: number, end3: number, duration: number): GTweener;
        _to4(start: number, start2: number, start3: number, start4: number, end: number, end2: number, end3: number, end4: number, duration: number): GTweener;
        _toColor(start: number, end: number, duration: number): GTweener;
        _shake(startX: number, startY: number, amplitude: number, duration: number): GTweener;
        _init(): void;
        _reset(): void;
        _update(dt: number): void;
    }
}

declare module 'drongo-cc/fairygui/tween/EaseType' {
    export enum EaseType {
        Linear = 0,
        SineIn = 1,
        SineOut = 2,
        SineInOut = 3,
        QuadIn = 4,
        QuadOut = 5,
        QuadInOut = 6,
        CubicIn = 7,
        CubicOut = 8,
        CubicInOut = 9,
        QuartIn = 10,
        QuartOut = 11,
        QuartInOut = 12,
        QuintIn = 13,
        QuintOut = 14,
        QuintInOut = 15,
        ExpoIn = 16,
        ExpoOut = 17,
        ExpoInOut = 18,
        CircIn = 19,
        CircOut = 20,
        CircInOut = 21,
        ElasticIn = 22,
        ElasticOut = 23,
        ElasticInOut = 24,
        BackIn = 25,
        BackOut = 26,
        BackInOut = 27,
        BounceIn = 28,
        BounceOut = 29,
        BounceInOut = 30,
        Custom = 31
    }
}

declare module 'drongo-cc/fairygui/utils/UBBParser' {
    export class UBBParser {
        protected _handlers: {
            [index: string]: (tagName: string, end: boolean, attr: string) => string;
        };
        lastColor: string;
        lastSize: string;
        linkUnderline: boolean;
        linkColor: string;
        constructor();
        protected onTag_URL(tagName: string, end: boolean, attr: string): string;
        protected onTag_IMG(tagName: string, end: boolean, attr: string): string;
        protected onTag_Simple(tagName: string, end: boolean, attr: string): string;
        protected onTag_COLOR(tagName: string, end: boolean, attr: string): string;
        protected onTag_FONT(tagName: string, end: boolean, attr: string): string;
        protected onTag_SIZE(tagName: string, end: boolean, attr: string): string;
        protected getTagText(remove?: boolean): string;
        parse(text: string, remove?: boolean): string;
    }
    export var defaultParser: UBBParser;
}

declare module 'drongo-cc/fairygui/utils/ByteBuffer' {
    import { Color } from "cc";
    export class ByteBuffer {
        stringTable: Array<string>;
        version: number;
        littleEndian: boolean;
        protected _view: DataView;
        protected _bytes: Uint8Array;
        protected _pos: number;
        protected _length: number;
        constructor(buffer: ArrayBuffer, offset?: number, length?: number);
        get data(): Uint8Array;
        get position(): number;
        set position(value: number);
        skip(count: number): void;
        readByte(): number;
        readBool(): boolean;
        readShort(): number;
        readUshort(): number;
        readInt(): number;
        readUint(): number;
        readFloat(): number;
        readString(len?: number): string;
        readS(): string;
        readSArray(cnt: number): Array<string>;
        writeS(value: string): void;
        readColor(hasAlpha?: boolean): Color;
        readChar(): string;
        readBuffer(): ByteBuffer;
        seek(indexTablePos: number, blockIndex: number): boolean;
    }
}

declare module 'drongo-cc/drongo/audios/AudioManager' {
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    import { IAudioChannel } from "drongo-cc/drongo/audios/IAudioChannel";
    /**
        * 音频管理器
        */
    export class AudioManager {
            /**
                * 全局唯一注入KEY
                */
            static KEY: string;
            /**
                * 最大音频轨道数量
                */
            static MAX_SOUND_CHANNEL_COUNT: number;
            /**
                * 总音量
                */
            static get volume(): number;
            static set volume(value: number);
            /**
                * 音乐音量
                */
            static get musicVolume(): number;
            static set musicVolume(value: number);
            /**
                * 声音音量
                */
            static get soundVolume(): number;
            static set soundVolume(value: number);
            /**
                * 静音总开关
                */
            static get mute(): boolean;
            static set mute(value: boolean);
            /**
                * 音乐静音开关
                */
            static get muteMusic(): boolean;
            static set muteMusic(value: boolean);
            /**
                * 声音静音开关
                */
            static get muteSound(): boolean;
            static set muteSound(value: boolean);
            /**
                * 播放音乐
                * @param value
                */
            static PlayMusic(url: ResURL, volume?: number, speed?: number, loop?: boolean): void;
            /**
                * 停止音乐
                */
            static StopMusic(): void;
            /**
                * 暂停
                */
            static PauseMusic(): void;
            /**
                * 继续播放
                */
            static ResumeMusic(): void;
            /**
                * 播放声音
                * @param value
                */
            static PlaySound(url: ResURL, playedCallBack: Function, volume: number, speed: number, loop: boolean): void;
            /**
                * 获取正在播放指定音频的轨道
                * @param url
                */
            static GetPlaying(url: ResURL): IAudioChannel;
    }
}

declare module 'drongo-cc/drongo/audios/IAudioChannel' {
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    /**
        * 音频通道
        */
    export interface IAudioChannel {
            readonly isPlaying: boolean;
            readonly url: ResURL;
            readonly curVolume: number;
            /**
                * 音量
                */
            volume: number;
            mute: boolean;
            /**
                * 播放
                * @param url
                * @param playedComplete
                * @param volume
                * @param fade
                * @param loop
                * @param speed
                */
            Play(url: ResURL, playedComplete: Function, volume: number, fade: {
                    time: number;
                    startVolume: number;
                    complete?: Function;
            }, loop: boolean, speed: number): void;
            /**
                * 停止
                */
            Stop(): void;
            /**
                *
                * @param time
                * @param startVolume
                * @param endVolume
                * @param complete
                * @param completeStop  结束后是否停止播放
                */
            Fade(time: number, endVolume: number, startVolume?: number, complete?: Function, completeStop?: boolean): void;
            /**
                * 心跳
                * @param dt
                */
            Tick(dt: number): void;
            /**
                * 暂停
                */
            Pause(): void;
            /**
                * 继续播放
                */
            Resume(): void;
    }
}

declare module 'drongo-cc/drongo/audios/IAudioGroup' {
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    import { IAudioChannel } from "drongo-cc/drongo/audios/IAudioChannel";
    /**
      * 音频组
      */
    export interface IAudioGroup {
        key: number;
        volume: number;
        mute: boolean;
        CalculateVolume(): void;
        CalculateMute(): void;
        Tick(dt: number): void;
        Play(url: ResURL, playedCallBack: Function, volume: number, speed: number, loop: boolean): void;
        GetPlayingChannel(url: ResURL): IAudioChannel;
        StopAll(): void;
    }
}

declare module 'drongo-cc/drongo/audios/IAudioManager' {
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    import { IAudioChannel } from "drongo-cc/drongo/audios/IAudioChannel";
    /**
        * 音频管理器
        */
    export interface IAudioManager {
            /**
                * 总音量
                */
            volume: number;
            /**
                * 音乐音量
                */
            musicVolume: number;
            /**
                * 声音音量
                */
            soundVolume: number;
            mute: boolean;
            muteMusic: boolean;
            muteSound: boolean;
            /**
                * 播放音乐
                * @param value
                */
            PlayMusic(url: ResURL, volume: number, speed: number, loop: boolean): void;
            /**
                * 停止音乐
                */
            StopMusic(): void;
            /**
                * 暂停
                */
            PauseMusic(): void;
            /**
                * 继续播放
                */
            ResumeMusic(): void;
            /**
                * 播放声音
                * @param value
                */
            PlaySound(url: ResURL, playedCallBack: Function, volume: number, speed: number, loop: boolean): void;
            /**
                * 获取正在播放指定音频的轨道
                * @param url
                */
            GetPlaying(url: ResURL): IAudioChannel;
    }
}

declare module 'drongo-cc/drongo/audios/AudioChannelImpl' {
    import { AudioSource, Node } from "cc";
    import { IAudioChannel } from "drongo-cc/drongo/audios/IAudioChannel";
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    export class AudioChannelImpl implements IAudioChannel {
        volume: number;
        constructor(node: Node, source?: AudioSource);
        get url(): ResURL;
        get mute(): boolean;
        set mute(value: boolean);
        Play(url: ResURL, playedComplete: Function, volume: number, fade?: {
            time: number;
            startVolume?: number;
            complete?: Function;
            completeStop?: boolean;
        }, loop?: boolean, speed?: number): void;
        Stop(): void;
        get isPlaying(): boolean;
        /**
          *
          * @param time
          * @param endVolume
          * @param startVolume
          * @param complete
          * @param completeStop
          * @returns
          */
        Fade(time: number, endVolume: number, startVolume?: number, complete?: Function, completeStop?: boolean): void;
        Tick(dt: number): void;
        Resume(): void;
        Pause(): void;
        get curVolume(): number;
    }
}

declare module 'drongo-cc/drongo/audios/AudioManagerImpl' {
    import { IAudioManager } from "drongo-cc/drongo/audios/IAudioManager";
    import { IAudioChannel } from "drongo-cc/drongo/audios/IAudioChannel";
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    /**
        * 音频播放管理器
        */
    export class AudioManagerImpl implements IAudioManager {
            constructor();
            /**
                * 总音量
                */
            get volume(): number;
            set volume(value: number);
            /**
                * 音乐总音量控制
                */
            set musicVolume(value: number);
            get musicVolume(): number;
            /**
                * 声音总音量
                */
            get soundVolume(): number;
            set soundVolume(value: number);
            set mute(value: boolean);
            get mute(): boolean;
            get muteMusic(): boolean;
            set muteMusic(value: boolean);
            get muteSound(): boolean;
            set muteSound(value: boolean);
            PlayMusic(url: ResURL, volume: number, speed: number, loop: boolean): void;
            StopMusic(): void;
            PauseMusic(): void;
            ResumeMusic(): void;
            PlaySound(url: ResURL, playedCallBack: Function, volume: number, speed: number, loop: boolean): void;
            GetPlaying(url: ResURL): IAudioChannel;
            Tick(dt: number): void;
    }
}

declare module 'drongo-cc/drongo/bindings/BinderUtils' {
    import { Handler } from "drongo-cc/drongo/utils/Handler";
    /**
        * 绑定器工具类
        */
    export class BinderUtils {
            constructor();
            /**
                * 绑定
                * @param group
                * @param source
                * @param property
                * @param targetOrCallBack
                * @param tPropertyOrCaller
                */
            static Bind(group: any, source: any, property: string | Array<string>, targetOrCallBack: any | Function, tPropertyOrCaller: string | any): void;
            /**
                * 取消绑定
                * @param group
                * @param source
                * @param property
                * @param targetOrCallBack
                * @param tPropertyOrCaller
                * @returns
                */
            static Unbind(group: any, source: any, property?: string | Array<string>, targetOrCallBack?: any | Function, tPropertyOrCaller?: string | any): void;
            /**
                * 添加函数钩子
                * @param group
                * @param source
                * @param functionName
                * @param preHandler
                * @param laterHandler
                */
            static AddHook(group: any, source: any, functionName: string, preHandler: Handler, laterHandler: Handler): void;
            /**
                * 删除函数钩子
                * @param group
                * @param source
                * @param functionName
                * @param preHandler
                * @param laterHandler
                * @returns
                */
            static RemoveHook(group: any, source: any, functionName?: string, preHandler?: Handler, laterHandler?: Handler): void;
    }
}

declare module 'drongo-cc/drongo/bindings/BindingUtils' {
    import { Handler } from "drongo-cc/drongo/utils/Handler";
    /**
        * 属性与属性数据
        */
    export interface PropertyBindInfo {
            /**
                * 数据源对象
                */
            source: any;
            /**
                * 数据源属性名
                */
            property: string | Array<string>;
            /**
                * 目标对象
                */
            targetOrCallback: any | Function;
            /**
                * 目标属性名
                */
            targetPropertyOrCaller: string | any;
    }
    /**
        * 方法与方法绑定信息
        */
    export interface FunctionHookInfo {
            source: any;
            functionName: string;
            preHandler: Handler;
            laterHandler: Handler;
    }
    /**
        * 绑定工具类
        */
    export class BindingUtils {
            constructor();
            /**
                * 属性和属性的绑定
                * @param source            数据源
                * @param property          数据源属性名
                * @param target            目标对象
                * @param targetProperty    目标对象属性名
                */
            BindAA(source: any, property: string, target: any, targetProperty: string): void;
            /**
                * 取消属性和属性的绑定
                * @param source
                * @param property
                * @param target
                * @param targetProperty
                */
            UnbindAA(source: any, property: string, target: any, targetProperty: string): void;
            /**
                * 属性和函数的绑定
                * @param source
                * @param property
                * @param callBack
                * @param caller
                */
            BindAM(source: any, property: string | Array<string>, callBack: (prepertys: Array<string>) => void, caller: any): void;
            /**
                * 取消属性和函数的绑定
                * @param source
                * @param propertys
                * @param callBack
                * @param caller
                */
            UnbidAM(source: any, propertys: string | Array<string>, callBack: (prepertys: Array<string>) => void, caller: any): void;
            /**
                * 函数和函数的绑定
                * @param source
                * @param functionName  目标函数
                * @param preHandle     该函数将在目标函数调用前调用
                * @param laterHandler  该函数将在目标函数调用后调用
                */
            BindMM(source: any, functionName: string, preHandle: Handler, laterHandler?: Handler): void;
            /**
                * 取消方法和方法的绑定关系
                * @param source
                * @param functionName
                * @param preHandle
                * @param laterHandler
                */
            UnbindMM(source: any, functionName: string, preHandle: Handler, laterHandler: Handler): void;
            BindByRecords(): void;
            UnbindByRecords(): void;
            /**
                * 销毁
                */
            Destroy(): void;
    }
}

declare module 'drongo-cc/drongo/bindings/FunctionHook' {
    import { Handler } from "drongo-cc/drongo/utils/Handler";
    /**
        * 函数钩子信息
        */
    export class FunctionHookInfo {
            /**
                * 方法名
                */
            functionName: string;
            /**
                * 前置处理器
                */
            preHandler: Handler;
            /**
                * 后置处理器
                */
            laterHandler: Handler;
            Equal(functionName: string, preHandler: Handler, laterHandler: Handler): boolean;
    }
    export class FunctionHook {
            data: any;
            constructor(data: any);
            /**
                * 添加钩子
                * @param group
                * @param functionName
                * @param preHandlers
                * @param laterHandlers
                */
            AddHook(group: any, functionName: string, preHandler: Handler, laterHandler: Handler): void;
            /**
                * 删除钩子
                * @param group
                * @param functionName
                * @param preHandler
                * @param laterHandler
                * @returns
                */
            RemoveHook(group: any, functionName?: string, preHandler?: Handler, laterHandler?: Handler): void;
    }
}

declare module 'drongo-cc/drongo/bindings/PropertyBinder' {
    /**
        * 绑定信息
        */
    export class BindInfo {
            /**
                * 属性KEY
                */
            property: string;
            /**
                * 目标或回调函数
                */
            targetOrCallBack: any | Function;
            /**
                * 目标属性或目标this引用
                */
            tPropertyOrCaller: string | any;
            constructor(property: string, targetOrCallBack: any | Function, tPropertyOrCaller: string | any);
            /**
                * 判断是否相等
                * @param property
                * @param targetOrCallBack
                * @param tPropertyOrCaller
                * @returns
                */
            Equal(property: string, targetOrCallBack: any | Function, tPropertyOrCaller: string | any): boolean;
    }
    /**
        * 属性绑定器
        */
    export class PropertyBinder {
            data: any;
            constructor(data: any);
            /**
                * 绑定
                * @param group
                * @param property
                * @param targetOrCallBack
                * @param tPropertyOrCaller
                * @returns
                */
            Bind(group: any, property: string | Array<string>, targetOrCallBack: any | Function, tPropertyOrCaller: string | any): void;
            /**
                * 取消绑定
                * @param group
                * @param property
                * @param targetOrCallBack
                * @param tPropertyOrCaller
                * @returns
                */
            Unbind(group: any, property?: string | Array<string>, targetOrCallBack?: any | Function, tPropertyOrCaller?: string | any): void;
    }
}

declare module 'drongo-cc/drongo/configs/BaseConfigAccessor' {
    import { IConfigAccessor } from "drongo-cc/drongo/configs/core/IConfigAccessor";
    /**
      * 配置存取器基类
      */
    export class BaseConfigAccessor implements IConfigAccessor {
        constructor();
        Save(value: any): boolean;
        Get<T>(): Array<T>;
        Destroy(): void;
    }
}

declare module 'drongo-cc/drongo/configs/ConfigManager' {
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    import { IConfigAccessor } from "drongo-cc/drongo/configs/core/IConfigAccessor";
    /**
        * 配置表管理器
        */
    export class ConfigManager {
            static KEY: string;
            /**配置表名转地址 */
            static Sheet2URL: (sheet: string) => ResURL;
            /**地址转配置表名 */
            static URL2Sheet: (url: ResURL) => string;
            /**
                * 注册存取器
                * @param sheet
                * @param accessors
                */
            static Register(sheet: string, accessors: new () => IConfigAccessor): void;
            /**
                * 获取存取器类
                * @param sheet
                * @returns
                */
            static GetAccessorClass(sheet: string): new () => IConfigAccessor;
            /**
                * 获取配置存取器
                * @param sheet
                */
            static GetAccessor(sheet: string): IConfigAccessor;
    }
}

declare module 'drongo-cc/drongo/configs/core/IConfigAccessor' {
    /**
        * 配置存取器接口
        */
    export interface IConfigAccessor {
            /**
                * 保存
                * @param value
                */
            Save(value: any): boolean;
            /**
                * 获取列表形式存储的配置内容
                */
            Get<T>(): Array<T>;
            /**
                * 清理
                */
            Destroy(): void;
    }
}

declare module 'drongo-cc/drongo/configs/core/IConfigManager' {
    import { IConfigAccessor } from "drongo-cc/drongo/configs/core/IConfigAccessor";
    /**
        * 配置管理器接口
        */
    export interface IConfigManager {
            /**
                * 注册存取器
                * @param sheet
                * @param accessors
                */
            Register(sheet: string, accessors: new () => IConfigAccessor): void;
            /**
                * 获取存取器类
                * @param sheet
                */
            GetAccessorClass(sheet: string): new () => IConfigAccessor;
            /**
                * 获取配置存取器
                * @param sheet
                */
            GetAccessor(sheet: string): IConfigAccessor;
    }
}

declare module 'drongo-cc/drongo/containers/Dictionary' {
    import { EventDispatcher } from "drongo-cc/drongo/events/EventDispatcher";
    /**
        * 字典
        */
    export class Dictionary<TKey, TValue> extends EventDispatcher {
            constructor();
            /**
                * 设置
                * @param key
                * @param value
                */
            Set(key: TKey, value: TValue): void;
            /**
                * 是否拥有指定KEY的元素
                * @param key
                * @returns
                */
            Has(key: TKey): boolean;
            /**
                * 获取指定元素
                * @param key
                * @returns
                */
            Get(key: TKey): TValue | undefined;
            /**
                * 通过索引获取元素
                * @param index
                * @returns
                */
            GetValue(index: number): TValue | undefined;
            /**
                * 删除指定元素
                * @param key
                * @returns
                */
            Delete(key: TKey): TValue | undefined;
            /**
                * 清除所有元素
                */
            Clear(): void;
            /**
             * 元素列表
             */
            get elements(): Array<TValue>;
            get size(): number;
            Destroy(): void;
    }
}

declare module 'drongo-cc/drongo/containers/List' {
    import { EventDispatcher } from "drongo-cc/drongo/events/EventDispatcher";
    /**
        * 列表
        */
    export class List<T> extends EventDispatcher {
            /**
                * 元素数量(内部再增删时会修改这个参数，外部只做计算和绑定使用，切记不可做赋值操作！)
                */
            count: number;
            constructor(only?: boolean);
            /**
                * 添加到末尾(注意如果保证唯一性，那么重复时就直接返回)
                * @param value
                */
            Push(value: T): boolean;
            /**
                * 添加到列表头部(注意如果保证唯一性，那么重复时就直接返回)
                * @param value
                * @returns
                */
            Unshift(value: T): boolean;
            /**
                * 获取并删除最后一个元素
                * @returns
                */
            Pop(): T;
            /**
                * 获取并删除第一个元素
                * @returns
                */
            Shift(): T;
            /**
                * 删除指定索引的元素
                * @param index
                */
            RemoveAt(index: number): T;
            /**
                * 删除元素
                * @param value
                */
            Remove(value: T): void;
            /**
                * 移除所有元素
                */
            Clear(): void;
            /**
                * 判断是否包含
                * @param value
                * @returns
                */
            Has(value: T): boolean;
            /**
                * 查找元素下标
                * @param value
                * @returns
                */
            Find(value: T): number;
            /**
                * 查找元素下标
                * @param predicate
                * @returns
                */
            FindIndex(predicate: (value: T, index: number, obj: T[]) => unknown): number;
            /**
                * 获取指定元素
                * @param index
                * @returns
                */
            Get(index: number): T;
            /**
                * 源列表数据(注意不要直接进行增删操作，而是通过List.push....等接口进行操作)
                */
            get elements(): Array<T>;
    }
}

declare module 'drongo-cc/drongo/debugers/Debuger' {
    export class Debuger {
            static KEY: string;
            /**
                * 引擎
                */
            static DRONGO: string;
            /**
                * 最大保存条数
                */
            static MaxCount: number;
            /**
                * 设置过滤
                * @param key
                * @param isOpen
                */
            static Debug(type: string, isOpen: boolean): void;
            /**
                * 获取已保存的日志
                * @param type
                * @returns
                */
            static GetLogs(type?: string): Array<string>;
            static Log(type: string, msg: any): void;
            static Err(type: string, msg: any): void;
            static Warn(type: string, msg: any): void;
            static Info(type: string, msg: any): void;
    }
}

declare module 'drongo-cc/drongo/debugers/DebugerImpl' {
    import { IDebuger } from "drongo-cc/drongo/debugers/IDebuger";
    export class DebugerImpl implements IDebuger {
            /**
                * 设置过滤
                * @param key
                * @param isOpen
                */
            Debug(key: string, isOpen: boolean): void;
            /**
                * 获取已保存的日志
                * @param type
                * @returns
                */
            GetLogs(type?: string): Array<string>;
            Log(type: string, msg: any): void;
            Err(type: string, msg: any): void;
            Warn(type: string, msg: any): void;
            Info(type: string, msg: any): void;
    }
}

declare module 'drongo-cc/drongo/debugers/IDebuger' {
    export interface IDebuger {
            /**
                * 设置过滤
                * @param key
                * @param isOpen
                */
            Debug(key: string, isOpen: boolean): void;
            /**
                * 获取已保存的日志
                * @param type
                * @returns
                */
            GetLogs(type?: string): Array<string>;
            /**
                * 日志
                * @param type
                * @param msg
                */
            Log(type: string, msg: any): void;
            /**
                * 错误
                * @param type
                * @param msg
                */
            Err(type: string, msg: any): void;
            /**
                * 警告
                * @param type
                * @param msg
                */
            Warn(type: string, msg: any): void;
            /**
                * 信息
                * @param type
                * @param msg
                */
            Info(type: string, msg: any): void;
    }
}

declare module 'drongo-cc/drongo/events/Event' {
    import { EventDispatcher } from "drongo-cc/drongo/events/EventDispatcher";
    export class Event {
            static readonly START: string;
            static readonly PROGRESS: string;
            static readonly COMPLETE: string;
            static readonly ERROR: string;
            static readonly SHOW: string;
            static readonly HIDE: string;
            static readonly ADD: string;
            static readonly REMOVE: string;
            static readonly UPDATE: string;
            static readonly CLEAR: string;
            static readonly State_Changed: string;
            /**
                * 获取事件通道
                * @param key
                * @returns
                */
            static GetChannel(key?: string): EventDispatcher;
            /**
                * 派发事件
                * @param eventType
                * @param data
                * @param channel   通道
                */
            static Emit(eventType: string, data?: any, channel?: string): void;
            /**
                * 添加事件监听
                * @param type
                * @param handler
                * @param caller
                * @param priority  优先级
                * @param channel   事件通道
                */
            static On(type: string, handler: (type: string, target?: any, ...arg: any[]) => void, caller: any, priority?: number, channel?: string): void;
            /**
                * 删除事件监听
                * @param type
                * @param handler
                * @param caller
                * @param channel
                * @returns
                */
            static Off(type: string, handler: (type: string, target?: any, ...arg: any[]) => void, caller: any, channel?: string): void;
            /**
                * 删除指定对象上的所有事件监听
                * @param caller
                * @param channel
                * @returns
                */
            static OffByCaller(caller: any, channel?: string): void;
            /**
                * 删除指定通道上的所有事件监听
                * @param channel
                * @returns
                */
            static OffAll(channel?: string): void;
    }
}

declare module 'drongo-cc/drongo/events/EventDispatcher' {
    import { IEventDispatcher } from "drongo-cc/drongo/events/IEventDispatcher";
    /**
        * 事件分发器(只有一对多的情况下去使用)
        */
    export class EventDispatcher implements IEventDispatcher {
            constructor();
            /**
                * 添加事件
                * @param key
                * @param caller
                * @param func
                * @param priority 优先级（数字越小优先级越高）
                */
            On(key: string, handler: (type: string, target?: any, data?: any) => void, caller: any, priority?: number): void;
            /**
                * 删除事件监听
                * @param key
                * @param caller
                * @param handler
                */
            Off(key: string, handler: (type: string, target?: any, data?: any) => void, caller: any): void;
            /**
                * 删除指定对象所有的事件处理
                * @param caller
                */
            OffByCaller(caller: any): void;
            /**
                * 删除所有事件监听
                */
            OffAllEvent(): void;
            /**
                * 派发事件
                * @param type
                * @param data
                */
            Emit(type: string, data?: any): void;
            /**
                * 是否有事件监听
                * @param key
                */
            HasEvent(key: string): boolean;
            /**
                * 是否包含指定函数事件监听
                * @param key
                * @param caller
                * @param func
                */
            HasEventHandler(key: string, handler: (type: string, target?: any, data?: any) => void, caller: any): boolean;
            Destroy(): void;
    }
}

declare module 'drongo-cc/drongo/events/IEventDispatcher' {
    /**
        * 事件分发器
        */
    export interface IEventDispatcher {
            /**
                * 添加事件
                * @param key
                * @param caller
                * @param handler
                * @param priority 优先级 数字越小优先级越高
                */
            On(key: string, handler: (type: string, target?: any, data?: any) => void, caller: any, priority?: number): void;
            /**
                * 删除事件监听
                * @param key
                * @param caller
                * @param handler
                */
            Off(key: string, handler: (type: string, target?: any, data?: any) => void, caller: any): void;
            /**
                * 删除指定对象所有的事件处理
                * @param caller
                */
            OffByCaller(caller: any): void;
            /**
                * 删除所有事件监听
                */
            OffAllEvent(): void;
            /**
                * 派发事件
                * @param key
                * @param data
                */
            Emit(key: string, data?: any): void;
            /**
                * 是否有事件监听
                * @param key
                */
            HasEvent(key: string): boolean;
            /**
                * 是否包含指定函数事件监听
                * @param key
                * @param caller
                * @param handler
                */
            HasEventHandler(key: string, handler: (type: string, target?: any, data?: any) => void, caller: any): boolean;
    }
}

declare module 'drongo-cc/drongo/exports/GetClassName' {
    /**
      * 获取类名
      * @param clazz
      * @returns
      */
    export function GetClassName(clazz: any): string;
}

declare module 'drongo-cc/drongo/fsm/FSM' {
    import { EventDispatcher } from "drongo-cc/drongo/events/EventDispatcher";
    import { IState } from "drongo-cc/drongo/fsm/IState";
    /**
        * 状态机
        */
    export class FSM extends EventDispatcher {
            /**所属*/
            owner: any;
            debug: boolean;
            constructor(owner: any, name: string);
            Tick(dt: number): void;
            /**
                * 添加
                * @param key
                * @param v
                */
            AddState(key: number, v: IState): void;
            /**
                * 切换状态
                * @param value
                * @param data
                * @returns
                */
            SwitchState(value: number, data?: any): void;
            get state(): number;
            get current(): IState;
            Destroy(): void;
    }
}

declare module 'drongo-cc/drongo/fsm/IState' {
    import { FSM } from "drongo-cc/drongo/fsm/FSM";
    /**
      * 状态接口
      */
    export interface IState {
        name: string;
        /**初始化 */
        Init(content: FSM): void;
        /**进入 */
        Enter(data?: any): void;
        /**心跳 */
        Tick(dt: number): void;
        /**退出 */
        Exit(): void;
        /**销毁 */
        Destroy(): void;
    }
}

declare module 'drongo-cc/drongo/gui/GUIManager' {
    import { GUIState } from "drongo-cc/drongo/gui/core/GUIState";
    import { IGUIMediator } from "drongo-cc/drongo/gui/core/IGUIMediator";
    /**
                * GUI 管理器
                */
    export class GUIManager {
            static KEY: string;
            /**
                * 在界面关闭后多长时间不使用则销毁(秒)
                */
            static GUI_GC_INTERVAL: number;
            /**
                * 注册
                * @param info
                * @returns
                */
            static Register(info: {
                    key: string;
            }): void;
            /**
                * 注销
                * @param key
                * @returns
                */
            static Unregister(key: string): void;
            /**
                * 打开指定UI界面
                * @param key
                * @param data
                */
            static Open(key: string, data?: any): void;
            /**
                * 关闭
                * @param key
                * @param checkLayer 是否检查全屏记录
                */
            static Close(key: string, checkLayer?: boolean): void;
            /**
                * 关闭所有界面
                */
            static CloseAll(): void;
            /**
                * 获取界面状态
                * @param key
                * @returns  0 未显示  1显示中
                */
            static GetGUIState(key: string): GUIState;
            /**
                * 是否已打开或再打开中
                * @param key
                * @returns
                */
            static IsOpen(key: string): boolean;
            /**
                * 获取GUI中的某个组件
                * @param key    界面全局唯一KEY
                * @param path   组件名称/路径
                */
            static GetUIComponent(key: string, path: string): any;
            /**
                * 获取界面的mediator
                */
            static GetMediatorByKey(key: string): IGUIMediator;
            /**
                * 获得前一个打开的全屏界面
                * @param curLayerKey 当前打开的全屏界面
                */
            static GetPrevLayer(): string;
    }
}

declare module 'drongo-cc/drongo/gui/core/layer/ILayer' {
    export interface ILayer {
            AddChild(child: any): void;
            AddChildAt(child: any, index: number): void;
            RemoveChild(child: any): void;
            RemoveChildAt(index: number): void;
            /**
                * 获取指定索引内容
                * @param index
                */
            GetChildAt(index: number): any;
            /**
                * 当前层拥有的子对象数量
                */
            GetCount(): number;
    }
}

declare module 'drongo-cc/drongo/gui/core/layer/ILayerManager' {
    import { ILayer } from "drongo-cc/drongo/gui/core/layer/ILayer";
    export interface ILayerManager {
            /**
                * 添加层
                * @param key
                * @param layer
                */
            AddLayer(key: string, layer: ILayer): void;
            /**
                * 删除层
                * @param key
                */
            RemoveLayer(key: string): void;
            /**
                * 获取层对象
                * @param key
                */
            GetLayer(key: string): ILayer | undefined;
            /**
                * 获得所有层
                */
            GetAllLayer(): ILayer[];
    }
}

declare module 'drongo-cc/drongo/gui/core/layer/LayerManager' {
    import { ILayer } from "drongo-cc/drongo/gui/core/layer/ILayer";
    /**
        * 层管理器
        */
    export class LayerManager {
            static KEY: string;
            /**
                * 添加一个层
                * @param key
                * @param layer
                */
            static AddLayer(key: string, layer: ILayer): void;
            /**
                * 删除层
                * @param key
                */
            static RemoveLayer(key: string): void;
            /**
                * 获取层对象
                * @param key
                */
            static GetLayer(key: string): ILayer | undefined;
            /**
                * 获得所有层
                */
            static GetAllLayer(): ILayer[];
    }
}

declare module 'drongo-cc/drongo/gui/core/loadingView/ILoadingView' {
    /**
        * 加载界面
        */
    export interface ILoadingView {
            /**
                * 更新
                * @param data
                */
            ChangeData(data: {
                    progress?: number;
                    label?: string;
                    tip?: string;
            }): void;
            /**
                * 显示
                */
            Show(): void;
            /**
                * 隐藏
                */
            Hide(): void;
    }
}

declare module 'drongo-cc/drongo/gui/core/loadingView/LoadingView' {
    import { ILoadingView } from "drongo-cc/drongo/gui/core/loadingView/ILoadingView";
    /**
      * 加载界面
      */
    export class LoadingView {
        static KEY: string;
        static Show(): void;
        static Hide(): void;
        static ChangeData(data: {
            progress?: number;
            label?: string;
            tip?: string;
        }): void;
        static get impl(): ILoadingView;
    }
}

declare module 'drongo-cc/drongo/gui/core/relations/IRelationInfo' {
    import { IRelationList } from "drongo-cc/drongo/gui/core/relations/IRelationList";
    /**
        * UI关联数据
        */
    export interface IRelationInfo {
            /**
                * 显示时的关联
                */
            show: IRelationList;
            /**
                * 隐藏时的关联
                */
            hide: IRelationList;
    }
}

declare module 'drongo-cc/drongo/gui/core/relations/IRelationList' {
    /**
        * UI关联数据列表
        */
    export interface IRelationList {
            /**
                * 要显示的UI列表
                */
            show: Array<string>;
            /**
                * 要隐藏的UI列表
                */
            hide: Array<string>;
    }
}

declare module 'drongo-cc/drongo/gui/core/relations/RelationManager' {
    import { IRelationInfo } from "drongo-cc/drongo/gui/core/relations/IRelationInfo";
    /**
     * GUI 关联关系
     */
    export class RelationManager {
            static DEBUG: boolean;
            constructor();
            /**
                * 添加UI关联关系
                * @param key
                * @param value
                */
            static AddRelation(key: string, value: IRelationInfo): void;
            static RemoveRelation(key: string): void;
            static GetRelation(key: string): IRelationInfo;
    }
}

declare module 'drongo-cc/drongo/gui/core/GUIState' {
    export enum GUIState {
            /**
                * 未使用状态
                */
            Null = 0,
            /**
                * 显示处理中
                */
            Showing = 1,
            /**
                * 已显示
                */
            Showed = 2,
            /**
                * 关闭处理中
                */
            Closeing = 3,
            /**
                * 已关闭
                */
            Closed = 4
    }
}

declare module 'drongo-cc/drongo/gui/core/IGUIManager' {
    import { GUIState } from "drongo-cc/drongo/gui/core/GUIState";
    import { IGUIMediator } from "drongo-cc/drongo/gui/core/IGUIMediator";
    /**
        * UI管理器接口
        */
    export interface IGUIManager {
            /**
                * 注册
                * @param key
                * @param mediatorClass
                * @param data
                */
            Register(info: {
                    key: string;
            }): void;
            /**
                * 注销
                * @param key
                */
            Unregister(key: string): void;
            /**
                * 心跳
                * @param dt
                */
            Tick(dt: number): void;
            /**
                * 打开
                * @param key
                * @param data
                */
            Open(key: string, data?: any): void;
            /**
                * 关闭
                * @param key
                * @param checkLayer  是否检查全屏打开记录
                */
            Close(key: string, checkLayer: boolean): void;
            /**
                * 关闭所有
                * @param key
                */
            CloseAll(): void;
            /**
                * 是否已打开
                * @param key
                * @returns
                */
            GetGUIState(key: string): GUIState;
            /**
                * 获取GUI中的某个组件
                * @param key    界面全局唯一KEY
                * @param path   组件名称/路径
                */
            GetUIComponent(key: string, path: string): any;
            /**
                * 获取界面Mediator
                * @param key 界面全局唯一KEY
                */
            GetMediatorByKey(key: string): IGUIMediator;
            /**
                * 获得前一个打开的全屏界面
                */
            GetPrevLayer(): string;
            /**
                * 是否已打开或打开中
                * @param key
                */
            IsOpen(key: string): boolean;
    }
}

declare module 'drongo-cc/drongo/gui/core/IGUIMediator' {
    import { IService } from "drongo-cc/drongo/services/IService";
    import { IViewComponent } from "drongo-cc/drongo/gui/core/IViewComponent";
    export interface IGUIMediator {
            info: any;
            /**
                * 依赖的服务
                */
            services: Array<{
                    new (): IService;
            }>;
            /**初始化完毕 */
            inited: boolean;
            /**
                * 显示节点
                */
            viewComponent: IViewComponent | null;
            /**
                * 播放显示动画
                * @param complete
                */
            PlayShowAnimation?: (complete: Function) => void;
            /**
                * 界面关闭时播放的动画
                * @param complete
                */
            PlayHideAnimation?: (complete: Function) => void;
            /**
                * 创建UI
                * @param info
                * @param created
                */
            CreateUI(info: any, created: Function): void;
            /**
                * 初始化
                */
            Init(): void;
            /**
                * 心跳
                * @param dt
                */
            Tick(dt: number): void;
            /**
                * 显示(内部接口，请勿调用)
                * @param data
                */
            Show(data?: any): void;
            /**
                * 当已经处在显示中 GUIManager.call时 则调用该方法而不调用showedUpdate
                * @param data
                */
            ShowedUpdate(data?: any): void;
            /**
                * 隐藏(内部接口，请勿调用)
                * @param info
                */
            Hide(): void;
            /**
                * 销毁
                */
            Destroy(): void;
            /**
                * 获取组件
                * @param path
                */
            GetUIComponent(path: string): any;
    }
}

declare module 'drongo-cc/drongo/gui/core/IViewComponent' {
    export interface IViewComponent {
        /**
          * 可见性
          */
        visible: boolean;
    }
}

declare module 'drongo-cc/drongo/gui/core/IViewCreator' {
    import { IGUIMediator } from "drongo-cc/drongo/gui/core/IGUIMediator";
    export interface IViewCreator {
        /**
          * 创建Mediator
          */
        createMediator(): IGUIMediator;
    }
}

declare module 'drongo-cc/drongo/gui/gui/BaseMediator' {
    import { GComponent } from "drongo-cc/fairygui/GComponent";
    import { Handler } from "drongo-cc/drongo/utils/Handler";
    /**
        * 基础UIMediator类
        */
    export class BaseMediator {
            /**UI组件 */
            ui: GComponent | null;
            /**初始化完毕*/
            inited: boolean;
            /**外部传参*/
            data: any;
            constructor();
            Init(): void;
            Tick(dt: number): void;
            Show(data: any): void;
            ShowedUpdate(data?: any): void;
            Hide(): void;
            Destroy(): void;
            /**
                * 根据名称或路径获取组件
                * @param path
                * @returns
                */
            GetUIComponent(path: string): any;
            /**
                * 属性和属性的绑定
                */
            BindAA(source: any, property: string, target: any, tProperty: string): void;
            /**
                * 取消属性和属性的绑定
                * @param source
                * @param property
                * @param target
                * @param tProperty
                */
            UnbindAA(source: any, property: string, target: any, tProperty: string): void;
            /**
                * 属性和函数的绑定
                * @param source
                * @param property
                * @param callBack
                * @param caller
                */
            BindAM(source: any, property: string | Array<string>, callBack: (prepertys: Array<string>) => void, caller: any): void;
            /**
                * 取消属性和函数的绑定
                * @param source
                * @param propertys
                * @param callBack
                * @param caller
                */
            UnbidAM(source: any, propertys: string | Array<string>, callBack: (prepertys: Array<string>) => void, caller: any): void;
            /**
                * 函数和函数的绑定
                * @param source
                * @param functionName  目标函数
                * @param preHandle     该函数将在目标函数调用前调用
                * @param laterHandler  该函数将在目标函数调用后调用
                */
            BindMM(source: any, functionName: string, preHandle: Handler, laterHandler?: Handler): void;
            /**
                * 取消方法和方法的绑定关系
                * @param source
                * @param functionName
                * @param preHandle
                * @param laterHandler
                */
            UnbindMM(source: any, functionName: string, preHandle: Handler, laterHandler: Handler): void;
            /**
                * 绑定事件
                * @param target
                * @param type
                * @param handler
                * @param caller
                */
            BindEvent(target: any, type: string, handler: Function, caller: any): void;
            /**
                * 取消事件绑定
                * @param target
                * @param type
                * @param handler
                * @param caller
                */
            UnbindEvent(target: any, type: string, handler: Function, caller: any): void;
            /**
                * 按照绑定记录添加事件
                */
            _addBindedEvents(): void;
            /**
                * 删除已绑定事件
                */
            _removeBindedEvents(): void;
    }
}

declare module 'drongo-cc/drongo/gui/gui/GUIManagerImpl' {
    import { GUIState } from "drongo-cc/drongo/gui/core/GUIState";
    import { IGUIManager } from "drongo-cc/drongo/gui/core/IGUIManager";
    import { IGUIMediator } from "drongo-cc/drongo/gui/core/IGUIMediator";
    import { IGUIInfo } from "drongo-cc/drongo/gui/gui/IGUIInfo";
    /**
        * GUI管理器
        */
    export class GUIManagerImpl implements IGUIManager {
            constructor();
            /**获取某个组件 */
            GetUIComponent(key: string, path: string): any;
            /**
                * 获取界面的mediator
                * @param key
                */
            GetMediatorByKey(key: string): IGUIMediator;
            Register(info: IGUIInfo): void;
            Unregister(key: string): void;
            Tick(dt: number): void;
            Open(key: string, data?: any): void;
            Close(key: string, checkLayer?: boolean): void;
            CloseAll(): void;
            /**
                * 获得前一个打开的全屏界面
                */
            GetPrevLayer(): string;
            /**
                * 获取界面状态
                * @param key
                */
            GetGUIState(key: string): GUIState;
            SetGUIState(key: string, state: GUIState): void;
            /**
                * 是否已打开或打开中
                * @param key
                * @returns
                */
            IsOpen(key: string): boolean;
    }
}

declare module 'drongo-cc/drongo/gui/gui/GUIMediator' {
    import { BaseMediator } from "drongo-cc/drongo/gui/gui/BaseMediator";
    import { IGUIInfo } from "drongo-cc/drongo/gui/gui/IGUIInfo";
    import { SubGUIMediator } from "drongo-cc/drongo/gui/gui/SubGUIMediator";
    import { IGUIMediator } from "drongo-cc/drongo/gui/core/IGUIMediator";
    import { IService } from "drongo-cc/drongo/services/IService";
    import { GComponent } from "drongo-cc/fairygui/GComponent";
    import { ResRef } from "drongo-cc/drongo/res/core/ResRef";
    /**
        * UI中介者
        */
    export class GUIMediator extends BaseMediator implements IGUIMediator {
            info: IGUIInfo | null;
            /**依赖的服务 */
            services: Array<{
                    new (): IService;
            }>;
            /**
                * 依赖的配置表名称
                */
            protected $configs: Array<string>;
            protected $configRefs: Array<ResRef>;
            /**根节点 */
            viewComponent: GComponent | null;
            /**子Mediator(用于代码拆分)*/
            protected $subMediators: Array<SubGUIMediator>;
            constructor();
            /**
                * 创建UI
                * @param info
                * @param created
                */
            CreateUI(info: any, created: Function): void;
            protected _maskClickHandler(): void;
            Init(): void;
            Show(data?: any): void;
            ShowedUpdate(data?: any): void;
            Hide(): void;
            /**
                * 关闭
                * @param checkLayer 是否检查全屏层记录
                */
            Close(checkLayer?: boolean): void;
            Tick(dt: number): void;
            Destroy(): void;
    }
}

declare module 'drongo-cc/drongo/gui/gui/GUIProxy' {
    import { IGUIInfo } from "drongo-cc/drongo/gui/gui/IGUIInfo";
    import { IGUIMediator } from "drongo-cc/drongo/gui/core/IGUIMediator";
    /**
        * GUI代理，将资源加载和Mediator逻辑隔离开
        */
    export class GUIProxy {
            info?: IGUIInfo;
            /**GUI中介*/
            mediator?: IGUIMediator;
            /**关闭时间*/
            closeTime: number;
            /**UI层次*/
            zIndex: number;
            /**数据 */
            data: any;
            constructor(info: IGUIInfo);
            Tick(dt: number): void;
            Show(data?: any): void;
            ShowedUpdate(data: any): void;
            Hide(): void;
            Destroy(): void;
            /**
                * 获取组件
                * @param path
                */
            getComponent(path: string): any;
    }
}

declare module 'drongo-cc/drongo/gui/gui/IGUIInfo' {
    import { GUIState } from "drongo-cc/drongo/gui/core/GUIState";
    export interface IGUIInfo {
            /**
                * UI 全局唯一KEY
                */
            key: string;
            /**
                * 是否永久存在
                */
            permanence: boolean;
            /**
                * UI所在层
                */
            layer: string;
            /**
                * 是否使用遮罩
                */
            modal: boolean;
            /**
                * 点击蒙版时时候关闭界面
                */
            modalClose: boolean;
            /**
                * 资源包
                */
            bundleName: string;
            /**
                * UIPackage名称
                */
            packageName: string;
            /**
                * FGUI 组件名
                */
            comName: string;
            /**UI所属状态 */
            state: GUIState;
    }
}

declare module 'drongo-cc/drongo/gui/gui/SubGUIMediator' {
    import { GComponent } from "drongo-cc/fairygui/GComponent";
    import { BaseMediator } from "drongo-cc/drongo/gui/gui/BaseMediator";
    import { GUIMediator } from "drongo-cc/drongo/gui/gui/GUIMediator";
    /**
      * 子UI 逻辑划分
      */
    export class SubGUIMediator extends BaseMediator {
        /**所属GUI*/
        owner: GUIMediator;
        constructor(ui: GComponent, owner: GUIMediator);
        Destroy(): void;
    }
}

declare module 'drongo-cc/drongo/gui/layer/Layer' {
    import { GComponent } from "drongo-cc/fairygui/GComponent";
    import { ILayer } from "drongo-cc/drongo/gui/core/layer/ILayer";
    export class Layer extends GComponent implements ILayer {
        isFullScrene: boolean;
        openRecord: Array<string>;
        constructor(name: string, isFullScrene?: boolean);
        AddChild(child: any): void;
        AddChildAt(child: any, index: number): void;
        RemoveChild(child: any): void;
        RemoveChildAt(index: number): void;
        GetChildAt(index: number): import("../../../drongo-cc").GObject;
        GetCount(): number;
    }
}

declare module 'drongo-cc/drongo/gui/layer/LayerManagerImpl' {
    import { ILayer } from "drongo-cc/drongo/gui/core/layer/ILayer";
    import { ILayerManager } from "drongo-cc/drongo/gui/core/layer/ILayerManager";
    /**
        * cocos fgui 层管理器
        */
    export class LayerManagerImpl implements ILayerManager {
            constructor();
            /**
                * 添加层
                * @param key
                * @param layer
                */
            AddLayer(key: string, layer: ILayer): void;
            /**
                * 删除层
                * @param key
                */
            RemoveLayer(key: string): void;
            GetLayer(layerKey: string): ILayer | undefined;
            /**
                * 获得所有层
                */
            GetAllLayer(): ILayer[];
    }
}

declare module 'drongo-cc/drongo/maxRects/FindPosition' {
    export enum FindPosition {
        ShortSideFit = 0,
        BottomLeft = 1,
        ContactPoint = 2,
        LongSideFit = 3,
        AreaFit = 4
    }
}

declare module 'drongo-cc/drongo/maxRects/MaxRectsBinPack' {
    import { FindPosition } from "drongo-cc/drongo/maxRects/FindPosition";
    import { Rect } from "drongo-cc/drongo/maxRects/Rect";
    export class MaxRectBinPack {
            /**
                * 构建方程
                * @param width {number} 画板宽度
                * @param height {number} 画板高度
                * @param allowRotate {boolean} 允许旋转
                */
            constructor(width: number, height: number, allowRotate?: boolean);
            /**
                * 在线算法入口 插入矩形方法
                * @param width {number}
                * @param height {number}
                * @param method {FindPosition}
                */
            Insert(width: number, height: number, method: FindPosition): Rect;
            /**
                * 占有率
                * @returns
                */
            get occupancy(): number;
            /**
                * 擦除节点
                * @param rect
                */
            EraseNoce(rect: Rect): void;
    }
}

declare module 'drongo-cc/drongo/maxRects/Rect' {
    export class Rect {
            /**
                * 起点 x 坐标
                */
            x: number;
            /**
                * 起点 y 坐标
                */
            y: number;
            /**
                * 宽度
                */
            width: number;
            /**
                * 高度
                */
            height: number;
            /**
                * 当前是否被旋转了
                */
            isRotated: boolean;
            /**
                * 自定义信息
                */
            info: any;
            /**
                * 克隆
                */
            Clone(): Rect;
            /**
                * 矩形是否在另一个矩形内部
                * @param otherRect {Rect}
                */
            IsIn(otherRect: Rect): boolean;
            get isEmpty(): boolean;
    }
}

declare module 'drongo-cc/drongo/pools/IRecyclable' {
    /**
        * 可重复利用对象接口
        */
    export interface IRecyclable {
            /**
                * 重置到可复用状态
                */
            Reset(): void;
            /**
                * 销毁
                */
            Destroy(): void;
    }
}

declare module 'drongo-cc/drongo/pools/Pool' {
    import { IRecyclable } from "drongo-cc/drongo/pools/IRecyclable";
    /**
        * 对象池
        */
    export class Pool {
            /**
                * 分配
                * @param clazz
                * @param maxCount
                * @returns
                */
            static allocate<T extends IRecyclable>(clazz: {
                    new (): T;
            }, maxCount?: number): T;
            /**
                * 回收
                * @param value
                */
            static recycle(value: IRecyclable): void;
            /**
                * 回收多个对象
                * @param list
                */
            static recycleList(list: Array<IRecyclable>): void;
            /**
                * 回收该类型的所有对象
                * @param clazz
                */
            static recycleAll<T extends IRecyclable>(clazz: {
                    new (): T;
            }): void;
    }
}

declare module 'drongo-cc/drongo/res/Res' {
    import { ResRef } from "drongo-cc/drongo/res/core/ResRef";
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    import { ILoader } from "drongo-cc/drongo/res/core/ILoader";
    export class Res {
            static KEY: string;
            /**
                * 最大加载线程
                */
            static MAX_LOADER_THREAD: number;
            /**
                * 设置资源加载器
                * @param key
                * @param loader
                */
            static SetResLoader(key: any, loader: new () => ILoader): void;
            /**
                * 获取资源加载器
                * @param key
                * @returns
                */
            static GetResLoader(key: any): new () => ILoader;
            /**
                * 获取资源
                * @param url
                * @param refKey
                * @param cb
                * @param progress
                */
            static GetResRef(url: ResURL, refKey: string, progress?: (progress: number) => void): Promise<ResRef>;
            /**
                * 获取资源列表
                * @param url
                * @param refKey
                * @param cb
                * @param progress
                */
            static GetResRefList(url: Array<ResURL>, refKey: string, progress?: (progress: number) => void): Promise<Array<ResRef>>;
            /**
                * 获取资源列表并放入字典中
                * @param url
                * @param refKey
                * @param result
                * @param cb
                * @param progress
                */
            static GetResRefMap(url: Array<ResURL>, refKey: string, result?: Map<string, ResRef>, progress?: (progress: number) => void): Promise<Map<string, ResRef>>;
    }
}

declare module 'drongo-cc/drongo/res/core/ILoader' {
    import { IEventDispatcher } from "drongo-cc/drongo/events/IEventDispatcher";
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    export interface ILoader extends IEventDispatcher {
            /**
                * 加载
                * @param url
                */
            Load(url: ResURL): void;
            /**
                * 重置
                */
            Reset(): void;
    }
}

declare module 'drongo-cc/drongo/res/core/IRes' {
    import { ResRef } from "drongo-cc/drongo/res/core/ResRef";
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    import { ILoader } from "drongo-cc/drongo/res/core/ILoader";
    export interface IRes {
            /**
                * 设置加载器
                * @param key
                * @param loader
                */
            SetResLoader(key: any, loader: new () => ILoader): void;
            /**
                * 获取加载器
                * @param key
                */
            GetResLoader(key: any): new () => ILoader;
            /**
             * 获取资源
             * @param url
             * @param refKey
             * @param progress
             */
            GetResRef(url: ResURL, refKey: string, progress?: (progress: number) => void): Promise<ResRef>;
            /**
                * 获取资源列表
                * @param urls
                * @param refKey
                * @param progress
                */
            GetResRefList(urls: Array<ResURL>, refKey: string, progress?: (progress: number) => void): Promise<Array<ResRef>>;
            /**
                * 获取资源列表按照URL存放到字典中
                * @param urls
                * @param refKey
                * @param result
                * @param progress
                */
            GetResRefMap(urls: Array<ResURL>, refKey: string, result?: Map<string, ResRef>, progress?: (progress: number) => void): Promise<Map<string, ResRef>>;
    }
}

declare module 'drongo-cc/drongo/res/core/IResManager' {
    import { ITicker } from "drongo-cc/drongo/ticker/ITicker";
    import { IResource } from "drongo-cc/drongo/res/core/IResource";
    import { ResRef } from "drongo-cc/drongo/res/core/ResRef";
    /**
        * 资源管理器接口
        */
    export interface IResManager extends ITicker {
            /**
                * 添加一个资源
                * @param value
                */
            AddRes(value: IResource): void;
            /**
                * 获取资源(内部接口)
                * @param key
                */
            _getRes(key: string): IResource;
            /**
                * 是否包含该资源
                * @param key
                */
            HasRes(key: string): boolean;
            /**
                * 添加并返回一个资源引用
                * @param key
                * @param refKey
                */
            AddResRef(key: string, refKey?: string): ResRef;
            /**
                * 删除一个资源引用
                * @param value
                */
            RemoveResRef(value: ResRef): void;
            /**
                * 资源清理
                */
            GC(ignoreTime?: boolean): void;
            /**
                * 资源列表
                */
            readonly resList: Array<IResource>;
    }
}

declare module 'drongo-cc/drongo/res/core/IResource' {
    import { ResRef } from "drongo-cc/drongo/res/core/ResRef";
    /**
        * 资源接口
        */
    export interface IResource {
            /**
                * 资源全局唯一KEY
                */
            key: string;
            /**
                * 最后一次操作的时间点
                */
            lastOpTime: number;
            /**
                * 资源
                */
            content: any;
            /**
                * 资源引用数量
                */
            readonly refCount: number;
            /**
                * 资源引用列表长度
                */
            readonly refLength: number;
            /**
                * 添加一个引用
                * @param refKey
                */
            AddRef(refKey?: string): ResRef;
            /**
                * 删除引用
                * @param value
                */
            RemoveRef(value: ResRef): void;
            /**销毁*/
            Destroy(): void;
            /**
                * 资源的引用列表
                */
            readonly refList: Array<ResRef>;
    }
}

declare module 'drongo-cc/drongo/res/core/ResRef' {
    export class ResRef {
            /**唯一KEY */
            key: string;
            /**引用KEY */
            refKey: string | undefined;
            /**资源内容 */
            content: any;
            constructor();
            /**释放 */
            Dispose(): void;
            get isDispose(): boolean;
            Reset(): void;
            /**
                * 彻底销毁(注意内部接口，请勿调用)
                */
            Destroy(): void;
    }
}

declare module 'drongo-cc/drongo/res/core/ResURL' {
    /**
        * 资源地址
        */
    export type ResURL = string | {
            url: string;
            bundle: string;
            type: string | any;
    };
    /**
        * 资源地址转唯一KEY
        * @param url
        * @returns
        */
    export function URL2Key(url: ResURL): string;
    /**
        * 唯一key转URL
        * @param key
        * @returns
        */
    export function Key2URL(key: string): ResURL;
    /**
        * 获取全路径
        * @param url
        * @returns
        */
    export function FullURL(url: ResURL): string;
}

declare module 'drongo-cc/drongo/res/loaders/CCLoaderImpl' {
    import { EventDispatcher } from "drongo-cc/drongo/events/EventDispatcher";
    import { ILoader } from "drongo-cc/drongo/res/core/ILoader";
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    /**
      * 加载器CC实现
      */
    export class CCLoaderImpl extends EventDispatcher implements ILoader {
        url: ResURL;
        constructor();
        Load(url: ResURL): void;
        Reset(): void;
    }
}

declare module 'drongo-cc/drongo/res/loaders/FGUILoader' {
    import { ILoader } from "drongo-cc/drongo/res/core/ILoader";
    import { EventDispatcher } from "drongo-cc/drongo/events/EventDispatcher";
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    export class FGUILoader extends EventDispatcher implements ILoader {
        url: ResURL;
        constructor();
        Load(url: ResURL): void;
        Reset(): void;
    }
}

declare module 'drongo-cc/drongo/res/loaders/Loader' {
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    export class Loader {
            constructor();
            /**
                * 加载
                * @param url
                * @param resKey
                * @param cb
                * @param progress
                */
            Load(url: ResURL | Array<ResURL>, cb?: (err: Error) => void, progress?: (progress: number) => void): void;
            ChildComplete(url: ResURL): void;
            ChildError(url: ResURL, err: Error): void;
            ChildProgress(url: ResURL, progress: number): void;
            static get single(): Loader;
    }
}

declare module 'drongo-cc/drongo/res/loaders/LoaderQueue' {
    import { ITicker } from "drongo-cc/drongo/ticker/ITicker";
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    export class LoaderQueue implements ITicker {
            constructor();
            Tick(dt: number): void;
            Load(url: ResURL): void;
            static get single(): LoaderQueue;
    }
}

declare module 'drongo-cc/drongo/res/loaders/ResRequest' {
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    export class ResRequest {
            /**
                * 资源地址
                */
            urls: Array<ResURL>;
            /**
                * 完成回调
                */
            cb?: (err: Error) => void;
            /**
                * 进度处理器
                */
            progress?: (progress: number) => void;
            constructor(url: ResURL | Array<ResURL>, cb?: (err: Error) => void, progress?: (progress: number) => void);
            Load(): void;
            ChildComplete(resURL: ResURL): void;
            ChildProgress(resURL: ResURL, progress: number): void;
            ChildError(err: Error): void;
            UpdateProgress(): void;
            Destroy(): void;
    }
}

declare module 'drongo-cc/drongo/res/res/FGUIResource' {
    import { ResourceImpl } from "drongo-cc/drongo/res/res/ResourceImpl";
    export class FGUIResource extends ResourceImpl {
        constructor();
        /**
          * 销毁
          */
        Destroy(): void;
    }
}

declare module 'drongo-cc/drongo/res/res/ResImpl' {
    import { IRes } from "drongo-cc/drongo/res/core/IRes";
    import { ILoader } from "drongo-cc/drongo/res/core/ILoader";
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    import { ResRef } from "drongo-cc/drongo/res/core/ResRef";
    export class ResImpl implements IRes {
        constructor();
        SetResLoader(key: any, loader: new () => ILoader): void;
        GetResLoader(key: any): new () => ILoader;
        GetResRef(url: ResURL, refKey: string, progress?: (progress: number) => void): Promise<ResRef>;
        GetResRefList(urls: ResURL[], refKey: string, progress?: (progress: number) => void): Promise<ResRef[]>;
        GetResRefMap(urls: ResURL[], refKey: string, result?: Map<string, ResRef>, progress?: (progress: number) => void): Promise<Map<string, ResRef>>;
    }
}

declare module 'drongo-cc/drongo/res/res/ResManager' {
    import { IResource } from "drongo-cc/drongo/res/core/IResource";
    import { ResRef } from "drongo-cc/drongo/res/core/ResRef";
    /**
        * 资源管理器
        */
    export class ResManager {
            static KEY: string;
            /**
                * 资源保留长时间GC
                */
            static GC_TIME: number;
            /**
                * 自动清理
                */
            static AUTO_GC: boolean;
            /**
                * 添加一个资源
                * @param value
                */
            static AddRes(value: IResource): void;
            /**
                * 是否包含该资源
                * @param key
                */
            static HasRes(key: string): boolean;
            /**
                * 获取资源（内部接口）
                * @param key
                * @returns
                */
            static _getRes(key: string): IResource;
            /**
                * 添加并返回一个资源引用
                * @param key
                * @param refKey
                */
            static AddResRef(key: string, refKey?: string): ResRef;
            /**
                * 删除一个资源引用
                * @param value
                */
            static RemoveResRef(value: ResRef): void;
            /**
                * 资源清理
                */
            static GC(ignoreTime?: boolean): void;
            /**
                * 资源列表
                * @returns
                */
            static get resList(): Array<IResource>;
    }
}

declare module 'drongo-cc/drongo/res/res/ResManagerImpl' {
    import { Dictionary } from "drongo-cc/drongo/containers/Dictionary";
    import { IResManager } from "drongo-cc/drongo/res/core/IResManager";
    import { IResource } from "drongo-cc/drongo/res/core/IResource";
    import { ResRef } from "drongo-cc/drongo/res/core/ResRef";
    /**
        * 默认资源管理器
        * @internal
        */
    export class ResManagerImpl implements IResManager {
            /**
                * 资源
                */
            protected __resDic: Dictionary<string, IResource>;
            /**
                * 等待销毁的资源
                */
            protected _waitDestroy: Array<IResource>;
            constructor();
            Tick(dt: number): void;
            AddRes(value: IResource): void;
            HasRes(key: string): boolean;
            _getRes(key: string): IResource;
            AddResRef(key: string, refKey?: string): ResRef;
            RemoveResRef(value: ResRef): void;
            GC(ignoreTime?: boolean): void;
            /**
                * 销毁
                * @param value
                */
            protected DestroyRes(value: IResource): void;
            get resList(): Array<IResource>;
    }
}

declare module 'drongo-cc/drongo/res/res/ResourceImpl' {
    import { IResource } from "drongo-cc/drongo/res/core/IResource";
    import { ResRef } from "drongo-cc/drongo/res/core/ResRef";
    export class ResourceImpl implements IResource {
            /**
                * 状态 0 正常 1待删除
                */
            state: number;
            key: string;
            lastOpTime: number;
            constructor();
            set content(value: any);
            get content(): any;
            AddRef(refKey?: string): ResRef;
            RemoveRef(value: ResRef): void;
            Destroy(): void;
            /**
                * 引用数量
                */
            get refCount(): number;
            /**
                * 引用列表长度
                */
            get refLength(): number;
            /**
                * 引用列表
                */
            get refList(): Array<ResRef>;
    }
}

declare module 'drongo-cc/drongo/services/BaseService' {
    import { ResRef } from "drongo-cc/drongo/res/core/ResRef";
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    import { IService } from "drongo-cc/drongo/services/IService";
    /**
        *  服务基类
        *  1.  如果有依赖的资源请在子类构造函数中给this.$configs和this.$assets进行赋值
        *  2.  重写$configAndAssetReady函数，并在完成初始化后调用this.initComplete()
        */
    export class BaseService implements IService {
            /**名称 */
            name: string;
            /**
                * 依赖的配置表名称
                */
            protected $configs: Array<string>;
            protected $configRefs: Array<ResRef>;
            /**
                * 依赖的资源
                */
            protected $assets: Array<ResURL>;
            protected $assetRefs: Array<ResRef>;
            protected __initCallback: (err: Error, result: IService) => void;
            constructor();
            Init(callback: (err: Error, result: IService) => void): void;
            /**
                * 依赖的配置与资源准备完毕
                */
            protected $configAndAssetReady(): void;
            /**
                * 初始化完成时调用
                */
            protected $initComplete(): void;
            Destroy(): void;
    }
}

declare module 'drongo-cc/drongo/services/IService' {
    /**
        * 服务接口
        */
    export interface IService {
            /**
                * 名称
                */
            name: string;
            /**
                * 初始化
                * @param callback
                */
            Init(callback: (err: Error, result: IService) => void): void;
            /**
                * 销毁
                */
            Destroy(): void;
    }
}

declare module 'drongo-cc/drongo/services/ServiceManager' {
    import { IService } from "drongo-cc/drongo/services/IService";
    export class ServiceManager {
            /**
                * 获取服务
                * @param key
                * @returns
                */
            static GetService<T extends IService>(value: {
                    new (): IService;
            }): Promise<T>;
            /**
                * 卸载服务
                * @param key
                */
            static Uninstall(value: IService): void;
    }
}

declare module 'drongo-cc/drongo/storages/ILocalStorage' {
    export interface ILocalStorage {
            /**
                * 初始化
                * @param gameName
                */
            Init(gameName: string): void;
            /**
                * 获取指定数据
                * @param key
                * @returns
                */
            GetItem(key: string): any;
            /**
                * 设置指定数据
                * @param key
                * @param value
                */
            SetItem(key: string, value: any): void;
            /**
                * 清理
                * @param key
                */
            ClearItem(key: string): void;
            /**
                * 清理所有
                */
            ClearAll(): void;
    }
}

declare module 'drongo-cc/drongo/storages/LocalStorage' {
    /**
        * 本地数据缓存
        */
    export class LocalStorage {
            static KEY: string;
            /**
                * 初始化
                * @param gameName
                */
            static Init(gameName: string): void;
            /**
                * 获取指定数据
                * @param key
                * @returns
                */
            static GetItem(key: string): any;
            /**
                * 设置指定数据
                * @param key
                * @param value
                */
            static SetItem(key: string, value: any): void;
            /**
                * 清理
                * @param key
                */
            static ClearItem(key: string): void;
            /**
                * 清理所有
                */
            static ClearAll(): void;
    }
}

declare module 'drongo-cc/drongo/storages/LocalStorageImpl' {
    import { ILocalStorage } from "drongo-cc/drongo/storages/ILocalStorage";
    /**
        * 本地数据缓存
        */
    export class LocalStorageImpl implements ILocalStorage {
            /**
                * 初始化
                * @param gameName
                */
            Init(gameName: string): void;
            /**
                * 获取指定数据
                * @param key
                * @returns
                */
            GetItem(key: string): any;
            /**
                * 设置指定数据
                * @param key
                * @param value
                */
            SetItem(key: string, value: any): void;
            /**
                * 清理
                * @param key
                */
            ClearItem(key: string): void;
            /**
                * 清理所有
                */
            ClearAll(): void;
    }
}

declare module 'drongo-cc/drongo/tasks/ITask' {
    import { IEventDispatcher } from "drongo-cc/drongo/events/IEventDispatcher";
    /**
        * 任务接口
        */
    export interface ITask extends IEventDispatcher {
            /**
                * 开始
                * @param data
                */
            Start(data?: any): void;
            /**
                * 销毁
                */
            Destroy(): void;
    }
}

declare module 'drongo-cc/drongo/tasks/TaskQueue' {
    import { EventDispatcher } from "drongo-cc/drongo/events/EventDispatcher";
    import { ITask } from "drongo-cc/drongo/tasks/ITask";
    /**
      * 任务队列
      */
    export class TaskQueue extends EventDispatcher implements ITask {
        constructor();
        AddTask(value: ITask): void;
        RemoveTask(value: ITask): void;
        Start(data?: any): void;
        Destroy(): void;
    }
}

declare module 'drongo-cc/drongo/tasks/TaskSequence' {
    import { EventDispatcher } from "drongo-cc/drongo/events/EventDispatcher";
    import { ITask } from "drongo-cc/drongo/tasks/ITask";
    /**
      * 任务序列（并行）
      */
    export class TaskSequence extends EventDispatcher implements ITask {
        constructor();
        AddTask(value: ITask): void;
        RemoveTask(value: ITask): void;
        Start(data?: any): void;
        Destroy(): void;
    }
}

declare module 'drongo-cc/drongo/ticker/ITicker' {
    /**
        * 心跳接口
        */
    export interface ITicker {
            /**
                * 心跳
                * @param dt    间隔时间(秒)
                */
            Tick(dt: number): void;
    }
}

declare module 'drongo-cc/drongo/ticker/ITickerManager' {
    import { ITicker } from "drongo-cc/drongo/ticker/ITicker";
    /**
        * 心跳管理器
        */
    export interface ITickerManager {
            /**
                * 心跳驱动函数
                * @param dt
                */
            Tick(dt: number): void;
            /**
                * 添加心跳
                * @param value
                */
            AddTicker(value: ITicker): void;
            /**
                * 删除心跳
                * @param value
                */
            RemoveTicker(value: ITicker): void;
            /**
                * 下一帧回调
                * @param value
                * @param caller
                */
            CallNextFrame(value: Function, caller: any): void;
            /**
                * 清理下一帧回调请求(如果存在的话)
                * @param value
                * @param caller
                */
            ClearNextFrame(value: Function, caller: any): void;
    }
}

declare module 'drongo-cc/drongo/ticker/TickerManager' {
    import { ITicker } from "drongo-cc/drongo/ticker/ITicker";
    import { ITickerManager } from "drongo-cc/drongo/ticker/ITickerManager";
    /**
        * 心跳管理器
        */
    export class TickerManager {
            static KEY: string;
            /**
                * 心跳驱动接口
                * @param dt
                */
            static Tick(dt: number): void;
            /**
                * 添加
                * @param value
                */
            static AddTicker(value: ITicker): void;
            /**
                * 删除
                * @param value
                */
            static RemoveTicker(value: ITicker): void;
            /**
                * 下一帧回调
                * @param value
                */
            static CallNextFrame(value: Function, caller: any): void;
            /**
                * 清理回调
                * @param value
                * @param caller
                */
            static ClearNextFrame(value: Function, caller: any): void;
            static get impl(): ITickerManager;
    }
}

declare module 'drongo-cc/drongo/ticker/TickerManagerImpl' {
    import { ITicker } from "drongo-cc/drongo/ticker/ITicker";
    import { ITickerManager } from "drongo-cc/drongo/ticker/ITickerManager";
    export class TickerManagerImpl implements ITickerManager {
        Tick(dt: number): void;
        AddTicker(value: ITicker): void;
        RemoveTicker(value: ITicker): void;
        CallNextFrame(value: Function, caller: any): void;
        ClearNextFrame(value: Function, caller: any): void;
    }
}

declare module 'drongo-cc/drongo/timer/ITimer' {
    /**
        * 计时器接口
        */
    export interface ITimer {
            /**
                * 当前时间(推荐使用)
                */
            readonly currentTime: number;
            /**
                * 绝对时间(注意效率较差，不推荐使用！)
                */
            readonly absTime: number;
            /**
                * 重新校准
                */
            Reset(time?: number): void;
    }
}

declare module 'drongo-cc/drongo/timer/Timer' {
    /**
        * 计时器工具类
        */
    export class Timer {
            static KEY: string;
            /**
                * 当前时间(推荐使用)
                */
            static get currentTime(): number;
            /**
                * 绝对时间(注意效率较差，不推荐使用！)
                */
            static get absTime(): number;
            /**
                * 重新校准
                * @param time  时间起点，如果不设置则获取系统当前时间点
                */
            static Reset(time?: number): void;
    }
}

declare module 'drongo-cc/drongo/timer/TimerImpl' {
    import { ITicker } from "drongo-cc/drongo/ticker/ITicker";
    import { ITimer } from "drongo-cc/drongo/timer/ITimer";
    export class TimerImpl implements ITimer, ITicker {
        constructor();
        Reset(): void;
        Tick(dt: number): void;
        get currentTime(): number;
        get absTime(): number;
    }
}

declare module 'drongo-cc/drongo/utils/BitFlag' {
    /**
        * bit位操作
        */
    export class BitFlag {
            constructor();
            Add(flag: number): void;
            Remove(flag: number): void;
            /**
                * 是否包含
                * @param flag
                * @returns
                */
            Has(flag: number): boolean;
            /**
                * 位码
                */
            get flags(): number;
            get elements(): Array<number>;
            Destroy(): void;
    }
}

declare module 'drongo-cc/drongo/utils/ByteArray' {
    /**
        * Endian 类中包含一些值，它们表示用于表示多字节数字的字节顺序。
        * 字节顺序为 bigEndian（最高有效字节位于最前）或 littleEndian（最低有效字节位于最前）。
        * @version Egret 2.4
        * @platform Web,Native
        * @language zh_CN
        */
    export class Endian {
            /**
                * 表示多字节数字的最低有效字节位于字节序列的最前面。
                * 十六进制数字 0x12345678 包含 4 个字节（每个字节包含 2 个十六进制数字）。最高有效字节为 0x12。最低有效字节为 0x78。（对于等效的十进制数字 305419896，最高有效数字是 3，最低有效数字是 6）。
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            static LITTLE_ENDIAN: string;
            /**
                * 表示多字节数字的最高有效字节位于字节序列的最前面。
                * 十六进制数字 0x12345678 包含 4 个字节（每个字节包含 2 个十六进制数字）。最高有效字节为 0x12。最低有效字节为 0x78。（对于等效的十进制数字 305419896，最高有效数字是 3，最低有效数字是 6）。
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            static BIG_ENDIAN: string;
    }
    export const enum EndianConst {
            LITTLE_ENDIAN = 0,
            BIG_ENDIAN = 1
    }
    /**
        * ByteArray 类提供用于优化读取、写入以及处理二进制数据的方法和属性。
        * 注意：ByteArray 类适用于需要在字节层访问数据的高级开发人员。
        * @version Egret 2.4
        * @platform Web,Native
        * @includeExample egret/utils/ByteArray.ts
        * @language zh_CN
        */
    export class ByteArray {
            /**
                * @private
                */
            protected bufferExtSize: number;
            protected data: DataView;
            protected _bytes: Uint8Array;
            /**
                * @private
                */
            protected _position: number;
            /**
                *
                * 已经使用的字节偏移量
                * @protected
                * @type {number}
                * @memberOf ByteArray
                */
            protected write_position: number;
            /**
                * 更改或读取数据的字节顺序；egret.EndianConst.BIG_ENDIAN 或 egret.EndianConst.LITTLE_ENDIAN。
                * @default egret.EndianConst.BIG_ENDIAN
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            get endian(): string;
            set endian(value: string);
            protected $endian: EndianConst;
            /**
                * @version Egret 2.4
                * @platform Web,Native
                */
            constructor(buffer?: ArrayBuffer | Uint8Array, bufferExtSize?: number);
            Reset(): void;
            Destroy(): void;
            /**
                * @deprecated
                * @version Egret 2.4
                * @platform Web,Native
                */
            SetArrayBuffer(buffer: ArrayBuffer): void;
            /**
                * 可读的剩余字节数
                *
                * @returns
                *
                * @memberOf ByteArray
                */
            get readAvailable(): number;
            get buffer(): ArrayBuffer;
            get rawBuffer(): ArrayBuffer;
            /**
                * @private
                */
            set buffer(value: ArrayBuffer);
            get bytes(): Uint8Array;
            /**
                * @private
                * @version Egret 2.4
                * @platform Web,Native
                */
            get dataView(): DataView;
            /**
                * @private
                */
            set dataView(value: DataView);
            /**
                * @private
                */
            get bufferOffset(): number;
            /**
                * 将文件指针的当前位置（以字节为单位）移动或返回到 ByteArray 对象中。下一次调用读取方法时将在此位置开始读取，或者下一次调用写入方法时将在此位置开始写入。
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            get position(): number;
            set position(value: number);
            /**
                * ByteArray 对象的长度（以字节为单位）。
                * 如果将长度设置为大于当前长度的值，则用零填充字节数组的右侧。
                * 如果将长度设置为小于当前长度的值，将会截断该字节数组。
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            get length(): number;
            set length(value: number);
            protected _validateBuffer(value: number): void;
            /**
                * 可从字节数组的当前位置到数组末尾读取的数据的字节数。
                * 每次访问 ByteArray 对象时，将 bytesAvailable 属性与读取方法结合使用，以确保读取有效的数据。
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            get bytesAvailable(): number;
            /**
                * 清除字节数组的内容，并将 length 和 position 属性重置为 0。
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            Clear(): void;
            /**
                * 从字节流中读取布尔值。读取单个字节，如果字节非零，则返回 true，否则返回 false
                * @return 如果字节不为零，则返回 true，否则返回 false
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            ReadBoolean(): boolean;
            /**
                * 从字节流中读取带符号的字节
                * @return 介于 -128 和 127 之间的整数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            ReadByte(): number;
            /**
                * 从字节流中读取 length 参数指定的数据字节数。从 offset 指定的位置开始，将字节读入 bytes 参数指定的 ByteArray 对象中，并将字节写入目标 ByteArray 中
                * @param bytes 要将数据读入的 ByteArray 对象
                * @param offset bytes 中的偏移（位置），应从该位置写入读取的数据
                * @param length 要读取的字节数。默认值 0 导致读取所有可用的数据
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            ReadBytes(bytes: ByteArray, offset?: number, length?: number): void;
            /**
                * 从字节流中读取一个 IEEE 754 双精度（64 位）浮点数
                * @return 双精度（64 位）浮点数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            ReadDouble(): number;
            /**
                * 从字节流中读取一个 IEEE 754 单精度（32 位）浮点数
                * @return 单精度（32 位）浮点数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            ReadFloat(): number;
            /**
                * 从字节流中读取一个带符号的 32 位整数
                * @return 介于 -2147483648 和 2147483647 之间的 32 位带符号整数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            ReadInt(): number;
            /**
                * 从字节流中读取一个带符号的 16 位整数
                * @return 介于 -32768 和 32767 之间的 16 位带符号整数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            ReadShort(): number;
            /**
                * 从字节流中读取无符号的字节
                * @return 介于 0 和 255 之间的无符号整数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            ReadUnsignedByte(): number;
            /**
                * 从字节流中读取一个无符号的 32 位整数
                * @return 介于 0 和 4294967295 之间的 32 位无符号整数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            ReadUnsignedInt(): number;
            /**
                * 从字节流中读取一个无符号的 16 位整数
                * @return 介于 0 和 65535 之间的 16 位无符号整数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            ReadUnsignedShort(): number;
            /**
                * 从字节流中读取一个 UTF-8 字符串。假定字符串的前缀是无符号的短整型（以字节表示长度）
                * @return UTF-8 编码的字符串
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            ReadUTF(): string;
            /**
                * 从字节流中读取一个由 length 参数指定的 UTF-8 字节序列，并返回一个字符串
                * @param length 指明 UTF-8 字节长度的无符号短整型数
                * @return 由指定长度的 UTF-8 字节组成的字符串
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            ReadUTFBytes(length: number): string;
            /**
                * 写入布尔值。根据 value 参数写入单个字节。如果为 true，则写入 1，如果为 false，则写入 0
                * @param value 确定写入哪个字节的布尔值。如果该参数为 true，则该方法写入 1；如果该参数为 false，则该方法写入 0
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            WriteBoolean(value: boolean): void;
            /**
                * 在字节流中写入一个字节
                * 使用参数的低 8 位。忽略高 24 位
                * @param value 一个 32 位整数。低 8 位将被写入字节流
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            WriteByte(value: number): void;
            /**
                * 将指定字节数组 bytes（起始偏移量为 offset，从零开始的索引）中包含 length 个字节的字节序列写入字节流
                * 如果省略 length 参数，则使用默认长度 0；该方法将从 offset 开始写入整个缓冲区。如果还省略了 offset 参数，则写入整个缓冲区
                * 如果 offset 或 length 超出范围，它们将被锁定到 bytes 数组的开头和结尾
                * @param bytes ByteArray 对象
                * @param offset 从 0 开始的索引，表示在数组中开始写入的位置
                * @param length 一个无符号整数，表示在缓冲区中的写入范围
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            WriteBytes(bytes: ByteArray, offset?: number, length?: number): void;
            /**
                * 在字节流中写入一个 IEEE 754 双精度（64 位）浮点数
                * @param value 双精度（64 位）浮点数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            WriteDouble(value: number): void;
            /**
                * 在字节流中写入一个 IEEE 754 单精度（32 位）浮点数
                * @param value 单精度（32 位）浮点数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            WriteFloat(value: number): void;
            /**
                * 在字节流中写入一个带符号的 32 位整数
                * @param value 要写入字节流的整数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            WriteInt(value: number): void;
            /**
                * 在字节流中写入一个 16 位整数。使用参数的低 16 位。忽略高 16 位
                * @param value 32 位整数，该整数的低 16 位将被写入字节流
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            WriteShort(value: number): void;
            /**
                * 在字节流中写入一个无符号的 32 位整数
                * @param value 要写入字节流的无符号整数
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            WriteUnsignedInt(value: number): void;
            /**
                * 在字节流中写入一个无符号的 16 位整数
                * @param value 要写入字节流的无符号整数
                * @version Egret 2.5
                * @platform Web,Native
                * @language zh_CN
                */
            WriteUnsignedShort(value: number): void;
            /**
                * 将 UTF-8 字符串写入字节流。先写入以字节表示的 UTF-8 字符串长度（作为 16 位整数），然后写入表示字符串字符的字节
                * @param value 要写入的字符串值
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            WriteUTF(value: string): void;
            /**
                * 将 UTF-8 字符串写入字节流。类似于 writeUTF() 方法，但 writeUTFBytes() 不使用 16 位长度的词为字符串添加前缀
                * @param value 要写入的字符串值
                * @version Egret 2.4
                * @platform Web,Native
                * @language zh_CN
                */
            WriteUTFBytes(value: string): void;
            /**
                *
                * @returns
                * @version Egret 2.4
                * @platform Web,Native
                */
            ToString(): string;
            /**
                * @private
                * 将 Uint8Array 写入字节流
                * @param bytes 要写入的Uint8Array
                * @param validateBuffer
                */
            _writeUint8Array(bytes: Uint8Array | ArrayLike<number>, validateBuffer?: boolean): void;
            /**
                * @param len
                * @returns
                * @version Egret 2.4
                * @platform Web,Native
                * @private
                */
            Validate(len: number): boolean;
            /**
                * @private
                * @param len
                * @param needReplace
                */
            protected ValidateBuffer(len: number): void;
    }
}

declare module 'drongo-cc/drongo/utils/Handler' {
    /**
        * 处理器
        */
    export class Handler {
            method?: Function;
            caller: any;
            once: boolean;
            /**
                * 运行
                * @param args
                */
            Run(...args: any[]): void;
            /**
                * 判断是否相同
                * @param value
                * @returns
                */
            Equal(value: Handler): boolean;
            /**
                * 创建一个实例
                * @param caller
                * @param method
                * @param once
                * @returns
                */
            static Create(caller: any, method: Function | undefined, once?: boolean): Handler;
    }
}

declare module 'drongo-cc/drongo/utils/Injector' {
    /**
        * 注入器
        */
    export class Injector {
            /**
                * 注入
                * @param key
                * @param clazz   类型或实例
                */
            static Inject(customKey: string, clazz: any): void;
            /**
                * 获取已注入的类型实例
                */
            static GetInject(customKey: string): any | null;
    }
}

declare module 'drongo-cc/drongo/utils/StringUtils' {
    export class StringUtils {
            /**
                * 是否为空
                * @param str
                */
            static IsEmpty(str: string): boolean;
            /**
                * 参数替换
                *  @param  str
                *  @param  rest
                *
                *  @example
                *
                *  var str:string = "here is some info '{0}' and {1}";
                *  trace(StringUtil.substitute(str, 15.4, true));
                *
                *  // this will output the following string:
                *  // "here is some info '15.4' and true"
                */
            static Substitute(str: string, ...rest: any[]): string;
            /**
             * 替换全部字符串
             * @param string src 源串
             * @param string from_ch 被替换的字符
             * @param string to_ch 替换的字符
             *
             * @return string 结果字符串
             */
            static ReplaceAll(src: string, from_ch: string, to_ch: string): string;
            /**
                * 拆分字符串
                * @param str
                */
            static SplitString(str: string, split0: string, split1: string): string[][];
            /**
                * 获取文件后缀名
                * @param url
                */
            static GetFileSuffix(url: string): string;
            /**
                * 替换后缀
                * @param url
                * @param suff      后缀
                * @returns
                */
            static ReplaceSuffix(url: string, suff: string): string;
    }
}

declare module 'drongo-cc/drongo' {
    import { Color, Node } from "cc";
    import { ResURL } from "drongo-cc/drongo/res/core/ResURL";
    export class Drongo {
            /**UI资源AssetBundle */
            static UIBundle: string;
            /**UI遮罩颜色值 */
            static MaskColor: Color;
            /**
                * 初始化
                * @param guiconfig     UI配置
                * @param layer         层级配置
                * @param sheetConfig   配置表配置
                * @param callback      回调
                */
            static Init(root: Node, guiconfig: ResURL, layer: {
                    layers: Array<string>;
                    fullScrene: Array<string>;
            }, sheetConfig: {
                    preURL: string;
                    bundle: string;
            }, callback: () => void): void;
            /**
                * 总心跳驱动接口
                * @param dt
                */
            static Tick(dt: number): void;
    }
}

declare module 'drongo-cc/fairygui/Relations' {
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export class Relations {
        handling: GObject | null;
        sizeDirty: boolean;
        constructor(owner: GObject);
        add(target: GObject, relationType: number, usePercent?: boolean): void;
        remove(target: GObject, relationType?: number): void;
        contains(target: GObject): boolean;
        clearFor(target: GObject): void;
        clearAll(): void;
        copyFrom(source: Relations): void;
        dispose(): void;
        onOwnerSizeChanged(dWidth: number, dHeight: number, applyPivot: boolean): void;
        ensureRelationsSizeCorrect(): void;
        get empty(): boolean;
        setup(buffer: ByteBuffer, parentToChild: boolean): void;
    }
}

declare module 'drongo-cc/fairygui/tooltips/TooltipsData' {
    /**
      * tooltips数据
      */
    export type TooltipsData = string | {
        type: string;
        data: any;
    };
}

declare module 'drongo-cc/fairygui/event/InputProcessor' {
    import { Component, Vec2 } from "cc";
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { FGUIEvent as FUIEvent } from "drongo-cc/fairygui/event/FGUIEvent";
    export class InputProcessor extends Component {
        _captureCallback: (evt: FUIEvent) => void;
        constructor();
        onLoad(): void;
        onEnable(): void;
        onDisable(): void;
        getAllTouches(touchIds?: Array<number>): Array<number>;
        getTouchPosition(touchId?: number): Vec2;
        getTouchTarget(): GObject;
        addTouchMonitor(touchId: number, target: GObject): void;
        removeTouchMonitor(target: GObject): void;
        cancelClick(touchId: number): void;
        simulateClick(target: GObject): void;
    }
}

declare module 'drongo-cc/fairygui/event/HitTest' {
    import { Vec2 } from "cc";
    import { GObject } from "drongo-cc/fairygui/GObject";
    import { ByteBuffer } from "drongo-cc/fairygui/utils/ByteBuffer";
    export interface IHitTest {
        hitTest(pt: Vec2, globalPt: Vec2): boolean;
    }
    export class PixelHitTest implements IHitTest {
        offsetX: number;
        offsetY: number;
        scaleX: number;
        scaleY: number;
        constructor(data: PixelHitTestData, offsetX?: number, offsetY?: number);
        hitTest(pt: Vec2): boolean;
    }
    export class PixelHitTestData {
        pixelWidth: number;
        scale: number;
        pixels: Uint8Array;
        constructor(ba: ByteBuffer);
    }
    export class ChildHitArea implements IHitTest {
        constructor(child: GObject);
        hitTest(pt: Vec2, globalPt: Vec2): boolean;
    }
}

declare module 'drongo-cc/fairygui/Margin' {
    export class Margin {
        left: number;
        right: number;
        top: number;
        bottom: number;
        constructor();
        copy(source: Margin): void;
        isNone(): boolean;
    }
}

declare module 'drongo-cc/fairygui/tooltips/ITooltipManager' {
    import { ITooltipsView } from "drongo-cc/fairygui/tooltips/ITooltipsView";
    import { TooltipsData } from "drongo-cc/fairygui/tooltips/TooltipsData";
    /**
        * tooltip管理器
        */
    export interface ITooltipsManager {
            /**
                * 注册
                * @param type
                * @param value
                */
            register(type: string, value: ITooltipsView): void;
            /**
                * 注销
                * @param type
                */
            unregister(type: string): void;
            /**
                * 是否正在显示中
                */
            readonly isShowing: boolean;
            /**
                * 显示
                * @param data
                */
            show(data: TooltipsData | undefined): void;
            /**
                * 隐藏
                */
            hide(): void;
    }
}

declare module 'drongo-cc/fairygui/tween/GPath' {
    import { Vec2 } from "cc";
    import { GPathPoint } from "drongo-cc/fairygui/tween/GPathPoint";
    export class GPath {
        constructor();
        get length(): number;
        create2(pt1: GPathPoint, pt2: GPathPoint, pt3?: GPathPoint, pt4?: GPathPoint): void;
        create(points: Array<GPathPoint>): void;
        clear(): void;
        getPointAt(t: number, result?: Vec2): Vec2;
        get segmentCount(): number;
        getAnchorsInSegment(segmentIndex: number, points?: Array<Vec2>): Array<Vec2>;
        getPointsInSegment(segmentIndex: number, t0: number, t1: number, points?: Array<Vec2>, ts?: Array<number>, pointDensity?: number): Array<Vec2>;
        getAllPoints(points?: Array<Vec2>, ts?: Array<number>, pointDensity?: number): Array<Vec2>;
    }
}

declare module 'drongo-cc/fairygui/tween/TweenValue' {
    export class TweenValue {
        x: number;
        y: number;
        z: number;
        w: number;
        constructor();
        get color(): number;
        set color(value: number);
        getField(index: number): number;
        setField(index: number, value: number): void;
        setZero(): void;
    }
}

declare module 'drongo-cc/fairygui/tooltips/ITooltipsView' {
    import { TooltipsData } from "drongo-cc/fairygui/tooltips/TooltipsData";
    export interface ITooltipsView {
            /**
                * view
                */
            viewComponent: any;
            /**
                * 更新数据
                * @param data
                */
            update(data: TooltipsData): void;
            /**
                * 销毁
                */
            destroy(): void;
    }
}

declare module 'drongo-cc/fairygui/tween/GPathPoint' {
    export enum CurveType {
        CRSpline = 0,
        Bezier = 1,
        CubicBezier = 2,
        Straight = 3
    }
    export class GPathPoint {
        x: number;
        y: number;
        control1_x: number;
        control1_y: number;
        control2_x: number;
        control2_y: number;
        curveType: number;
        constructor();
        static newPoint(x: number, y: number, curveType: number): GPathPoint;
        static newBezierPoint(x: number, y: number, control1_x: number, control1_y: number): GPathPoint;
        static newCubicBezierPoint(x: number, y: number, control1_x: number, control1_y: number, control2_x: number, control2_y: number): GPathPoint;
        clone(): GPathPoint;
    }
}

